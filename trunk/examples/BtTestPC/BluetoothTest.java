/*
 * BluetoothTest.java
 *
 * Created on 30 December 2007, 22:37
 */
package bttestprog;
import javax.swing.SwingWorker;
import java.io.*;
/**
 *
 * @author  andy
 */
public class BluetoothTest extends javax.swing.JFrame
{
    btcomms nxt = null;	
	TestTask test = null;
	int nextSeq;
	
	/** Creates new form BluetoothTest */
	public BluetoothTest()
	{
		initComponents();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        Connect = new javax.swing.JButton();
        SendSlow = new javax.swing.JButton();
        SendFast = new javax.swing.JButton();
        Exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        Connect.setText("Connect");
        Connect.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ConnectActionPerformed(evt);
            }
        });

        SendSlow.setText("Send Slow");
        SendSlow.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                SendSlowActionPerformed(evt);
            }
        });

        SendFast.setText("Send Fast");
        SendFast.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                SendFastActionPerformed(evt);
            }
        });

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Connect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SendSlow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SendFast)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Exit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Connect, Exit, SendFast, SendSlow});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Connect)
                    .addComponent(SendSlow)
                    .addComponent(SendFast)
                    .addComponent(Exit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void ExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ExitActionPerformed
	{//GEN-HEADEREND:event_ExitActionPerformed
		System.exit(0);
	}//GEN-LAST:event_ExitActionPerformed

	private void SendFastActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SendFastActionPerformed
	{//GEN-HEADEREND:event_SendFastActionPerformed
		byte[] cmd = new byte[16];
		if (nxt != null) 
		{
			cmd[0] = (byte)0xff;
			cmd[1] = (byte)0xfe;
			nxt.send((byte)3, cmd, 16);
			for(int i = 0; i < 100; i++)
			{
				cmd[0] = (byte)i;
				cmd[1] = (byte)(i>>8);
				nxt.send((byte)3, cmd, 16);
				try {Thread.sleep(100);} catch(Exception e){}
			}
			cmd[0] = (byte)0xff;
			cmd[1] = (byte)0xff;
			nxt.send((byte)3, cmd, 16);
		}
	}//GEN-LAST:event_SendFastActionPerformed

	private void SendSlowActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SendSlowActionPerformed
	{//GEN-HEADEREND:event_SendSlowActionPerformed
		byte[] cmd = new byte[16];
		if (nxt != null) 
		{
			cmd[0] = (byte)0xff;
			cmd[1] = (byte)0xfe;
			nxt.send((byte)3, cmd, 16);
			for(int i = 0; i < 100; i++)
			{
				cmd[0] = (byte)i;
				cmd[1] = (byte)(i>>8);
				nxt.send((byte)3, cmd, 16);
				try {Thread.sleep(1000);} catch(Exception e){}
			}
			cmd[0] = (byte)0xff;
			cmd[1] = (byte)0xff;
			nxt.send((byte)3, cmd, 16);
		}
	}//GEN-LAST:event_SendSlowActionPerformed

	private void ConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ConnectActionPerformed
	{//GEN-HEADEREND:event_ConnectActionPerformed
        if (null == test)
		{
			nextSeq = 0;
			nxt = new btcomms();
			(test = new TestTask()).execute();
		}
	}//GEN-LAST:event_ConnectActionPerformed
    private class TestTask extends SwingWorker
    {
		int dataCnt=0;
        @Override
        protected Void doInBackground() {
            //btcomms nxt = new btcomms();
            //if (nxt.connect(null, null))
			byte[] packet = new byte[256];
            if (nxt.connect("NXT", "001653012f99"))
            {
				System.out.println("Connected to nxt...");
                try{
                    byte req = nxt.recv(true);
                    int [] dist = new int[4];
                    while(req != 0 && !isCancelled())
                    {
						int len = nxt.recv(packet);
						if (len > 0)
						{
							if (packet[0] != 4)
								System.out.println("Unexpected packet type " + packet[0] + " length " + len);
							else
							{
								int seq = ((int)packet[1] & 0xff) + (((int)packet[2] & 0xff) << 8);
								System.out.println("Packet len " + len + " seq " + seq);
								if (seq != nextSeq)
								{
									System.out.println("**** BAD SEQ ****");
									nextSeq = seq;
								}
								nextSeq++;
							}
						}
                        req = nxt.recv(true);
                    }
                }
                catch (Exception e)
                {
                    System.err.println(e.getMessage());
                }
				System.out.println("Exiting comms");
                try
                {
                    nxt.close();
					nxt = null;
                }
                catch (IOException e)
                {
                }
            }

			test = null;
            return null;
        }	
	}
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{
				new BluetoothTest().setVisible(true);
			}
		});
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Connect;
    private javax.swing.JButton Exit;
    private javax.swing.JButton SendFast;
    private javax.swing.JButton SendSlow;
    // End of variables declaration//GEN-END:variables
	
}
