package lejos.pc.tools;

import lejos.pc.comm.*;
import java.io.*;
import javax.swing.JOptionPane;
import javax.swing.*;
import java.awt.*;

/***
 *GUI application to write the leJOS Virtual Machine and Menu system to the NXT Flash.
 * Created on August 15, 2008, 9:36 AM
 * revised Nov 10, 2008 to run with Java 5
 * Author Roger Glassey  based on Andy Shaw original command line code 
 */
public class NXJFlashG extends javax.swing.JFrame
{
   private static final long serialVersionUID = 177459839585979953L;
// GUI generated by NetBeans
   /** Creates new form NXJFlashG */
   public NXJFlashG()
    {
      initComponents();
      setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT);
      flasher = new Flasher();
      setVisible(true);
    }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.0
    */   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
    {
      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("Install  NXJ  Firmware in  NXT");
      setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT);
      JPanel p1 = new JPanel();
      goB = new javax.swing.JButton();
      goB.setText(" Start Program ");
      p1.add(goB);
      add(p1, BorderLayout.NORTH);  
      msgPanel = new javax.swing.JPanel();
      msgPanel.setPreferredSize(new Dimension(400, 200));
      add(msgPanel, BorderLayout.SOUTH);
    
      progressTxt = new javax.swing.JTextArea();
      progressLabel = new javax.swing.JLabel("Progress Log");
      progressTxt.setColumns(30);
      progressTxt.setRows(60);

      JPanel progress = new JPanel();
      progress.setMinimumSize(new Dimension(350,400));
      progress.add(progressLabel, BorderLayout.NORTH);
      progress.add(progressTxt, BorderLayout.CENTER);
      add(progress, BorderLayout.CENTER);

      goB.setText("Start program");
      goB.addActionListener(new java.awt.event.ActionListener()
      {

         public void actionPerformed(java.awt.event.ActionEvent evt)
          {
            goBActionPerformed(evt);
          }
      });

    }

   private void goBActionPerformed(java.awt.event.ActionEvent evt)
    {
      flasher.start();
    }

   /**
    * @param args the command line arguments
    */
   public static void main(String args[])
    {
      new NXJFlashG().setVisible(true);

    }

   /**
    * Inner class to to the real work
    */
   private class Flasher extends Thread
   {

      public void run()
       {
         boolean more = true;
         while (more)
         {
            JOptionPane.showMessageDialog(msgPanel,
                    "Click OK when your NXT is turned on and connected ");
            try
            {
               byte[] memoryImage = createImage();
               boolean format = 0 == JOptionPane.showConfirmDialog(msgPanel, "Do you want to erase all NXT files now?",
                       "Clear memory first", JOptionPane.YES_NO_OPTION);

               NXTSamba nxt = openDevice();
               if (nxt != null)
                  updateDevice(nxt, memoryImage, format);
            } catch (Exception e)
            {
               JOptionPane.showMessageDialog(msgPanel, "Bad news: An error has occurred " + e,
                       "Fatal error ", JOptionPane.ERROR_MESSAGE);
               System.exit(1);

            }
            more = 0 == JOptionPane.showConfirmDialog(msgPanel, "Do you want to flash firmware again?",
                    "Question", JOptionPane.YES_NO_OPTION);
         }
         System.exit(1);
       }

      /**
       * Locate and open an NXT device ready for the firmware to be updated. First
       * we look for devices that are already in SAM-BA mode. If we do not find
       * any we look for devices in normal mode and attempt to re-boot them into
       * SAM-BA mode.
       * @return
       */
      NXTSamba openDevice() throws NXTCommException, IOException
       {
         NXTSamba samba = new NXTSamba();

         // Look for devices in SAM-BA mode
         NXTInfo[] nxts = samba.search();
         System.out.println(" Samba search 1 found:" + nxts.length);
         if (nxts.length == 0)
         {
            progressTxt.append("\n No devices in firmware update mode were found.\nSearching for other NXT devices...\n");
            NXTCommand cmd = NXTCommand.getSingleton();
            nxts = cmd.search(null, NXTCommFactory.USB);
            if (nxts.length <= 0)
            {
               JOptionPane.showMessageDialog(msgPanel,
                       "No NXT found. \nPlease check that it's turned on and connected.",
                       "Warning",
                       JOptionPane.WARNING_MESSAGE);
               return null;
            }
            progressTxt.append("\n found " + nxts[0].name + " Bluetooth address  " + nxts[0].deviceAddress);
            if (!cmd.open(nxts[0]))
            {
               JOptionPane.showMessageDialog(msgPanel,
                       "Failed to open device in command mode.",
                       "Error",
                       JOptionPane.ERROR_MESSAGE);
               return null;
            }
            // Force into firmware update mode.
            cmd.boot();
            progressTxt.append("\n Waiting for device to re-boot...");
            int n = 0;
            int count = 1;
            while (n == 0)
            {
               nxts = samba.search();
               n = nxts.length;
               System.out.println("searching " + n);
               progressTxt.append(" . ");
               try
               {
                  Thread.sleep(1000);
               } catch (Exception e)
               {
               }
               if (0 == count++ % 5)
                  progressTxt.append("\n still waiting");
            }
         }
         if (nxts.length > 1)
         {
            System.err.println("Too many devices in firmware update mode.");
            return null;
         }
         if (nxts.length == 0)
         {
            System.err.println("Unable to locate the device in firmware update mode.\nPlease place the device in reset mode and try again.");
            return null;
         }
         // Must be just the one. Try and open it!
         if (!samba.open(nxts[0]))
         {
            System.out.println("Failed to open device in SAM-BA mode.");
            return null;
         }
         return samba;
       }

      private void updateDevice(NXTSamba nxt, byte[] memoryImage, boolean format) throws IOException
       {

         progressTxt.append("\n NXT now open in firmware update mode.");
         progressTxt.append("\n Unlocking pages.");
         nxt.unlockAllPages();
         progressTxt.append("\nWriting memory image...");
         nxt.writePages(0, memoryImage, 0, memoryImage.length);
         if (format)
         {
            progressTxt.append("\nFormatting...");
            byte[] zeroPage = new byte[NXTSamba.PAGE_SIZE];
            for (int i = 0; i < 3; i++)
            {
               nxt.writePage(MAX_FIRMWARE_PAGES + i, zeroPage, 0);
            }
         }
         nxt.jump(0x00100000);
         nxt.close();
         progressTxt.append("\n The NXT is starting  - using the new image");
       }

      /**
       * Create the memory image ready to be flashed to the device. Load the
       * firmware and menu images into memory ready for flashing. The command
       * line provides details of the location of the image files to be used.
       * @param commandLine Options for the location of the firmware and menu.
       * @return Memory image ready to be flashed to the device.
       */
      byte[] createImage() throws IOException, FileNotFoundException
       {
         progressTxt.append("\n Building Firmware Image ");
         byte[] memoryImage = new byte[MAX_FIRMWARE_PAGES * NXTSamba.PAGE_SIZE];
         String vmName = null;
         String menuName = null;

         String home = System.getProperty("nxj.home");
         if (home == null)
            home = System.getenv("NXJ_HOME");
         if (home == null)
            home = "";
         String SEP = System.getProperty("file.separator");
         vmName = home + SEP + "bin" + SEP + VM;
         menuName = home + SEP + "bin" + SEP + MENU;
         progressTxt.append("\nVM file: " + vmName);
         progressTxt.append("\nMenu file: " + menuName);
         FileInputStream vm = new FileInputStream(vmName);
         FileInputStream menu = new FileInputStream(menuName);
         int vmLen = vm.read(memoryImage, 0, memoryImage.length);
         // Round up to page and use as base for the menu location
         int menuStart = ((vmLen + NXTSamba.PAGE_SIZE - 1) / NXTSamba.PAGE_SIZE) * NXTSamba.PAGE_SIZE;
         // Read the menu. Note we may read less than the full size of the menu.
         // If so this will be caught by the overall size check below.
         int menuLen = menu.read(memoryImage, menuStart, memoryImage.length - menuStart);
         // We store the length and location of the Menu in the last page.
         storeWord(memoryImage, memoryImage.length - 4, menuLen);
         storeWord(memoryImage, memoryImage.length - 8, menuStart);
         // Check overall size allow for size/length markers in last block.
         if (menuStart + menuLen + 8 > memoryImage.length)
         {
            progressTxt.append("\nCombined size of VM and Menu > " + memoryImage.length);
            return null;
         }
         progressTxt.append("\nVM size: " + vmLen + " bytes.");
         progressTxt.append("\nMenu size: " + menuLen + " bytes.");
         progressTxt.append("\nTotal image size " + (menuStart + menuLen) + "/" + memoryImage.length + " bytes.");
         return memoryImage;
       }

      /**
       * Format and store a 32 bit value into a memory image.
       * @param mem The image in which to store the value
       * @param offset The location in bytes in the image
       * @param val The value to be stored.
       */
      void storeWord(byte[] mem, int offset, int val)
       {
         mem[offset++] = (byte) (val & 0xff);
         mem[offset++] = (byte) ((val >> 8) & 0xff);
         mem[offset++] = (byte) ((val >> 16) & 0xff);
         mem[offset++] = (byte) ((val >> 24) & 0xff);
       }
      private static final int MAX_FIRMWARE_PAGES = 336;
      private static final String VM = "lejos_nxt_rom.bin";
      private static final String MENU = "StartUpText.bin";
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton goB;
   private javax.swing.JPanel msgPanel;
   private javax.swing.JLabel progressLabel;
   private javax.swing.JTextArea progressTxt;
   // End of variables declaration//GEN-END:variables
   private Flasher flasher;
   public static final int DEFAULT_WIDTH = 400;
   public static final int DEFAULT_HEIGHT = 700;
}
