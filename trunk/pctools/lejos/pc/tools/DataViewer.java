package lejos.pc.tools;

import lejos.pc.comm.*;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.TextArea;
import java.awt.TextField;
import java.awt.event.*;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JRadioButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.io.*;


/**
 * Downloads  data from the DataLogger running on a MXT <br>
 * Uses Bluetooth  or USB<br>
 * To use BlueTooth, click "Use Bluetooth" before "Connect"<br>
 * When the status is "Connected", click "Start Download"<br>
 * If you wnat to resend, press any button except ESC on the NXT, then click 
 * "Start Download"<br>
 * You can run another download session, but you have to connect again. 
 * The data can be copied and pasted into a spread sheet for analysis & graphing <br>
 * status field shows messages 
 * @author Roger Glassey revised  06.15.2008
 *
 * 
 */
public class DataViewer extends JFrame implements ActionListener
{
    private JButton startButton = new JButton("Download");
    private JButton connectButton = new JButton("Connect");
    private JRadioButton btButton = new JRadioButton("Bluetooth");
    private JRadioButton usbButton = new JRadioButton("USB");
    private TextField statusField = new TextField(20);
    private TextField lengthField = new TextField(2);
    private TextField nameField = new TextField(10);
    private TextField addrField = new TextField(12);
    private int _recordCount = 0;  //used by append()
    private int _rowLength = 4; // used by append();
    private DataViewComms comm;
    /**
     * screen area to hold the downloaded data
     */
    private TextArea theLog;

    /**
     * Constructor builds GUI
     */
    public DataViewer()
    {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setTitle("View output from NXJ Datalogger");
        setSize(550, 600);
        buildGUI();
        comm = new DataViewComms(this);
    }

    private void buildGUI()
    {
        JPanel connectPanel = new JPanel();  //holds  button and text field
        ButtonGroup choiceGroup = new ButtonGroup();
        choiceGroup.add(usbButton);
        usbButton.setSelected(true);
        choiceGroup.add(btButton);
        connectPanel.add(usbButton);
        connectPanel.add(btButton);
        connectPanel.add(connectButton);
        connectButton.addActionListener(this);
        connectPanel.add(new JLabel(" Name "));
        connectPanel.add(nameField);
        connectPanel.add(new JLabel(" Addr "));
        connectPanel.add(addrField);

        JPanel downLoadPanel = new JPanel();//  holds label and text field
        downLoadPanel.add(startButton);
        downLoadPanel.add(new JLabel("Row Length:"));
        downLoadPanel.add(lengthField);
        lengthField.setText("2");
        startButton.addActionListener(this);
        downLoadPanel.add(new JLabel("  Status:"));
        downLoadPanel.add(statusField);

        JPanel topPanel = new JPanel();  // North area of the frame
        topPanel.setLayout(new GridLayout(2, 1));
        topPanel.add(connectPanel);
        topPanel.add(downLoadPanel);
        add(topPanel, BorderLayout.NORTH);
        theLog = new TextArea(40, 40); // Center area of the frame
        getContentPane().add(theLog, BorderLayout.CENTER);
        setMessage("Waiting to Connect");
    }

    /**
     * Required by action listener; only action is generated by the get Length button
     */
    public void actionPerformed(ActionEvent e)
    {
        String name = nameField.getText();
        String address = addrField.getText();
        boolean useUSB;
        if (e.getSource() == connectButton)
        {
            useUSB = usbButton.isSelected();
            if (useUSB)
            {
                setMessage("using USB ");
            } else
            {
                setMessage("using Bluetooth");
            }
            if (!comm.connecTo(name, address, useUSB))
            {
                setMessage("Connect Failed");
                if (useUSB)
                {
                    JOptionPane.showMessageDialog(null, "Sorry... but USB did not connect.\n" +
                            "You might want to check:\n " +
                            " Is the NXT turned on and connected? \n " +
                            " Does it display  'wait for USB'? ", "We have a connection problem.",
                            JOptionPane.PLAIN_MESSAGE);

                } else
                {
                    JOptionPane.showMessageDialog(null, "Sorry... Bluetooth did not connect. \n" +
                            "You might want to check:\n" +
                            " Is the dongle plugged in?\n" +
                            " Is the NXT turned on?\n" +
                            " Does it display  'wait for BT'? ",
                            "We have a connection problem.",
                            JOptionPane.PLAIN_MESSAGE);
                }
            }
            _recordCount = 0;
        } else if (e.getSource() == startButton)
        {
            _rowLength = Integer.parseInt(lengthField.getText());
//            name = nameField.getText();
//            address = addrField.getText();
            _recordCount = 0;
            comm.startDownload();
        }
    }

    public void connectedTo(String name, String address)
    {
        nameField.setText(name);
        addrField.setText(address);
        setMessage("Connected ");
    }

    public void append(float value)
    {
        if (0 == _recordCount % _rowLength)
        {
            theLog.append("\n");
        }
        theLog.append(value + "\t ");
        _recordCount++;
    }

    /**
     * Initialize the display Frame 
     */
    public static void main(String[] args)
    {
        DataViewer frame = new DataViewer();
        frame.setVisible(true);
    }

    /**
     *messages generated show in the status Field
     */
    public void setMessage(String s)
    {
        statusField.setText(s);
    }
}
class DataViewComms
{

    private NXTConnector con;
    private boolean _connected = false;
    private DataViewer viewer;
    OutputStream os;
    InputStream is;
    DataOutputStream dataOut;
    DataInputStream dataIn;
    String _name;
    String _address;
    boolean _useUSB;

    public DataViewComms(DataViewer viewer)
    {
        this.viewer = viewer;
    }

    public boolean connecTo(String name, String address, boolean useUSB)
    {
        int protocol = 0;
        _useUSB = useUSB;
        _name = name;
        _address = address;
        if (useUSB)
        {
            protocol = NXTCommFactory.USB;
            viewer.setMessage("Connecting USB");
        } else
        {
            viewer.setMessage("Connecting BT");
            protocol = NXTCommFactory.BLUETOOTH;
        }
        System.out.println(" connecting to " + name + " " + address);
        con = new NXTConnector();
        boolean res = con.connectTo(name, address, protocol);
        System.out.println("Connect result " + res);
        if (!res)
        {
            System.out.println(" Connection failed ");
            return false;
        }
        os = con.getOutputStream();
        dataIn = con.getDataIn();
        if (dataIn == null)
        {
            System.out.println(" NULL input stream ");
            return false;
        } else
        {
            if (os == null)
            {
                System.out.println(" OS NULL");
                return false;
            } else
            {
                _connected = true;
            }
        }
        name = con.getNXTInfo().name;
        address = con.getNXTInfo().deviceAddress;
        viewer.connectedTo(name, address);
        return true;
    }

    public void startDownload()
    {
        if (!_connected)
        {
          System.out.println("not yet connected");
            return;

        }
        int b = 15;
        try //handshake - ready to read data
        {
            os.write(b);
            os.flush();
        } catch (IOException e)
        {
            System.out.println(e + " handshake failed ");
        }
        try
        {
            int length = dataIn.readInt();
            viewer.setMessage(" reading length " + length);
            for (int i = 0; i < length; i++)
            {
                viewer.append(dataIn.readFloat());
            }
        } catch (IOException e)
        {
            System.out.println("read error " + e);
        }
    }
}	
