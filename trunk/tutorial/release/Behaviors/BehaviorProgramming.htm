<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
  <meta http-equiv="CONTENT-TYPE"
 content="text/html; charset=windows-1252">
  <title>Behavior programming</title>
  <meta name="GENERATOR" content="OpenOffice.org 2.4 (Win32)">
  <meta name="AUTHOR" content="Roger">
  <meta name="CREATED" content="20080820;14050000">
  <meta name="CHANGED" content="20080820;14274389">
  <style type="text/css">
<!--
@page { size: 8.5in 11in; margin-right: 1.25in; margin-top: 1in; margin-bottom: 1in }
P { margin-bottom: 0.08in; direction: ltr; color: #000000; widows: 2; orphans: 2 }
P.western { font-family: "Times New Roman", serif; font-size: 12pt; so-language: en-US }
P.cjk { font-family: "Times New Roman", serif; font-size: 12pt }
P.ctl { font-family: "Times New Roman", serif; font-size: 12pt; so-language: ar-SA }
H1 { margin-bottom: 0.04in; direction: ltr; color: #ff6600; widows: 2; orphans: 2 }
H1.western { font-family: "Arial", sans-serif; font-size: 16pt; so-language: en-US }
H1.cjk { font-family: "Times New Roman", serif; font-size: 16pt }
H1.ctl { font-family: "Arial", sans-serif; font-size: 16pt; so-language: ar-SA }
H2 { margin-bottom: 0.08in; direction: ltr; color: #ff950e; widows: 2; orphans: 2 }
H2.western { font-family: "Arial", sans-serif; font-size: 14pt; so-language: en-GB; font-style: italic }
H2.cjk { font-family: "Times New Roman", serif; font-size: 14pt; font-style: italic }
H2.ctl { font-family: "Arial", sans-serif; font-size: 14pt; so-language: ar-SA; font-style: italic }
H3 { margin-left: 0.2in; margin-bottom: 0.08in; direction: ltr; color: #000000; widows: 2; orphans: 2 }
H3.western { font-family: "Arial", sans-serif; font-size: 13pt; so-language: en-GB; font-style: normal }
H3.cjk { font-family: "Times New Roman", serif; font-size: 13pt; font-style: normal }
H3.ctl { font-family: "Arial", sans-serif; font-size: 13pt; so-language: ar-SA; font-style: normal }
P.body-text-2-western { margin-left: 0.1in; font-family: "Times New Roman", serif; font-size: 12pt; so-language: en-US }
P.body-text-2-cjk { margin-left: 0.1in; font-family: "Times New Roman", serif; font-size: 12pt }
P.body-text-2-ctl { margin-left: 0.1in; font-family: "Times New Roman", serif; font-size: 12pt; so-language: ar-SA }
P.body-text-3-western { margin-left: 0.2in; font-family: "Times New Roman", serif; font-size: 12pt; so-language: en-US }
P.body-text-3-cjk { margin-left: 0.2in; font-family: "Times New Roman", serif; font-size: 12pt }
P.body-text-3-ctl { margin-left: 0.2in; font-family: "Times New Roman", serif; font-size: 8pt; so-language: ar-SA }
A:link { color: #0000ff }
A:visited { color: #800080 }
-->
  </style>
</head>
<body style="direction: ltr; color: rgb(0, 0, 0);" lang="en-US"
 link="#0000ff" vlink="#800080">
<p class="western"><br>
<br>
</p>
<p class="western"><br>
<br>
</p>
<table style="width: 827px;" border="0" cellpadding="7" cellspacing="0">
  <col width="216"> <col width="582"> <tbody>
    <tr valign="top">
      <td width="216">
      <p><a name="_top"></a><font color="#0000ff"><u><a
 href="../index.htm">Tutorial
Start</a></u></font> </p>
      <div id="Table of Contents1" dir="ltr">
      <p><a href="#1.Behavior%20programming%7Coutline">Behavior
programming</a></p>
      <p style="margin-left: 0.17in;"><a
 href="#1.1.Programming%20Behavior%20with%20leJOS%20NXJ%7Coutline">Programming
Behavior with leJOS NXJ</a></p>
      <p style="margin-left: 0.17in;"><a
 href="#1.2.The%20Behavior%20API%7Coutline">The Behavior API</a></p>
      <p style="margin-left: 0.33in;"><a2
 href="#1.2.1.lejos.subsumption.Behavior%7Coutline">lejos.subsumption.Behavior</a></p>
      <p style="margin-left: 0.33in;"><a
 href="#1.2.2.lejos.subsumption.Arbitrator%7Coutline">lejos.subsumption.Arbitrator</a></p>
      <p style="margin-left: 0.17in;"><a
 href="#1.3.Advanced%20Behavior%20Coding%7Coutline">Advanced
Behavior Coding</a></p>
      <p style="margin-left: 0.33in;"><a
 href="#Coding_Solid_Behavior_Methods">Coding&nbsp; Solid
Behavior Methods</a></p>
      <p style="margin-left: 0.33in;"><a
 href="#recommended_design_pattern">Recommended Design Pattern</a></p>
      <p style="margin-left: 0.33in;"><a href="#1.3.3.Summary%7Coutline">Summary</a></p>
      </div>
      <p class="western"><br>
      <br>
      </p><td style="width: 682px;">
      <h1 class="western"><a name="1.Behavior programming|outline"></a>Behavior
programming</h1>
      <p class="western"><br>
      <br>
      </p>
      <h2 class="western" lang="en-GB"><a name="1.1.Programming Behavior with leJOS NXJ|outline"></a>
Programming Behavior with leJOS NXJ</h2>
      <p class="body-text-2-western">When most people
start programming a robot, they think of the program flow as a series
of if-thens, which is reminiscent of structured programming (Figure 1).
This type of programming is very easy to get started in and hardly
requires any thought or design beforehand. A programmer can just sit at
the computer and start typing,( although a little thought before the
typing may avoid a lot of grief later. )</p>
      <p class="body-text-2-western" style="margin-left: 0in;"><font color="#000000"><img style="border: 1px solid ; width: 408px; height: 229px; float: left;" alt="fig1" src="figure1.jpg" name="graphics1" hspace="12"></font></p>
      <p class="body-text-2-western" style="margin-left: 0in;"></p>
      <p class="body-text-2-western" style="margin-left: 0in;"><br>
      </p>
      <p class="western"><br>
      </p>
      <p class="western"><br>
      </p>
      <p class="western"><br>
      </p>
      <p class="western"><br>
      </p>
      <p class="western"><br>
      </p>
      <p class="western"><br>
Figure 1: Structured programming
visualized.</p>
      <p class="western"></p>
The problem is, the code ends up
as spaghetti code; all tangled up and difficult to expand. The behavior
control model, in contrast, requires a little more planning before
coding begins, but the payoff is that each behavior is nicely
encapsulated within an easy to understand structure. This will
theoretically make your code easier to understand by other programmers
familiar with the behavior control model, but more importantly it
becomes very easy to&nbsp; add or remove specific behaviors from
the overall
structure, without negative repercussions to the rest of the code. <br>
      <br>
The
concepts of Behavior Programming as implemented in leJOS NXJ
&nbsp;are very simple.:<br>
1. Only one Behavior can be
active and in control of the robot at any time
      <br>
2. Each Behavior has a fixed
priority.
      <br>
3. The active&nbsp;Behavior
has higher&nbsp;priority than any&nbsp;other Behavior that
should take
control. <br>
      <h3 class="western" lang="en-GB"><a name="1.2.The Behavior API|outline"></a> The Behavior
API</h3>
      <p class="body-text-2-western">The Behavior API is
is composed of only one interface and one class. The
Behavior interface defines the individual behavior classes.
&nbsp;The
Behavior interface
is very general and defines three public methods. &nbsp;It works
quite
well because, even though the individual
implementations of a behavior vary widely, they are all treated
alike.&nbsp; Once all the Behaviors are created, they are given to
an Arbitrator to regulate which Behavior
should be activated at any time.&nbsp; The Arbitrator
class&nbsp;and the Behavior
interface
are located the lejos.subsumption package. The API for the Behavior
interface is as follows.</p>
      <h3 class="western" lang="en-GB"><a name="1.2.1.lejos.subsumption.Behavior|outline"></a>
lejos.subsumption.Behavior</h3>

      <ul>
        <li>
          <p class="western">boolean takeControl() </p>
        </li>
      </ul>
      <p class="body-text-2-western">Returns a boolean
value to indicate if this behavior should become active. For example,
if a touch sensor indicates the robot has bumped into an object, this
method should return true. &nbsp;&nbsp;</p>
      <ul>
        <li>
          <p class="western">void action() </p>
        </li>
      </ul>
      <p class="body-text-2-western">The code in this
method performs&nbsp;a particular action when the behavior becomes
active. For
example, if takeControl() detects the robot has collided with an
obstacle, the action() code could make the robot back up and turn away
from the obstacle. &nbsp; &nbsp;A behavior is active as long as
its action() method is running. &nbsp;&nbsp;</p>
      <ul>
        <li>
          <p class="western">void suppress() </p>
        </li>
      </ul>
      <p class="body-text-2-western">The code in the
suppress() method should immediately terminate the code running in the
action() method, so that the Behavior is no longer active.</p>
      <p class="body-text-2-western">As you can see, the
three methods in the Behavior interface are quite simple. If a robot
has three discreet behaviors, then the programmer will need to create
three classes, with each class implementing the Behavior interface.
Once these classes are complete, the code should hand the Behavior
objects off to the Arbitrator to deal with.</p>
      <h3 class="western" lang="en-GB"><a name="1.2.2.lejos.subsumption.Arbitrator|outline"></a>
lejos.subsumption.Arbitrator</h3>
      <ul>
        <li>
          <p class="western">The constructor is:<br>
public Arbitrator(Behavior []
behaviors, &nbsp;boolean returnWhenInactive) <br>
C<font size="3"><span lang="en-US">reates an
Arbitrator object that regulates when each of the behaviors will become
active.<br>
Parameter: behaviors.&nbsp; In this array of Behaviors,&nbsp;
the
higher the array index number of a Beha</span></font>vior,
the higher the priority level.<br>
Parameter: &nbsp;boolean &nbsp;returnWhenInacative;
&nbsp;If <span style="font-weight: bold;">true</span>
the program exits when there no behavior should take control.
&nbsp;Otherwise, the program runs until shut down by pressing the
Enter and Escape buttons. &nbsp;</p>
        </li>
      </ul>
      <p class="body-text-3-western">Public Methods </p>
      <ul>
        <li>
          <p class="western">public void start() <br>
Starts the arbitration system.</p>
        </li>
      </ul>
      <p class="body-text-3-western">The Arbitrator class
is even easier to understand than Behavior. When an Arbitrator object
is instantiated, it is given an array of Behavior objects.
&nbsp;The index of an object in this array is its priority
number.&nbsp; Once it has this array, the start() method is called
and
it begins arbitrating; deciding which behavior should become active.
The Arbitrator calls the takeControl() method on each Behavior object,
starting with the object with the highest index number in the array. It
works its way down through the array (in decreasing priority
order)&nbsp; till it finds a behavior that wants to take control.
&nbsp;If this priority index is greater than that of the current
active behavior,&nbsp; the active behavior is suppressed. The
action&nbsp; method is then called on the behavior of this index.
&nbsp;</p>
      <p class="western"><font color="#000000"><img style="border: 1px solid ; width: 373px; height: 182px; float: left;" alt="fig2" src="figure2.jpg" name="graphics2" hspace="12"><br>
      </font></p>
      <p class="western"><font color="#000000"><br>
      </font></p>
      <p class="western"><font color="#000000"><br>
      </font></p>
      <p class="western"><font color="#000000"><br>
      </font></p>
      <p class="western"><font color="#000000"><br>
      <br>
      </font></p>
      <p class="western"> Figure 2: Higher level behaviors
suppress lower level behaviors.</p>
      <p class="body-text-3-western">Now that we are
familiar with the Behavior API under leJOS, let's look at a simple
example using three behaviors. For this example, we will program some
behaviors for a simple robot with differential steering. This robot
will
drive forward as it's primary low-level behavior. This activity
continues unless&nbsp; the robotic hits an
object; then a high priority behavior will become active to back the
robot
up and turn it 90 degrees.&nbsp; There will also be a third
behavior which we
will insert into the program after the first two have been completed.
Let's start with the first behavior. &nbsp;<span style="font-style: italic;"></span></p>
      <p class="body-text-3-western">As we saw in the
Behavior interface, we must implement the methods action(), suppress(),
and takeControl(). The behavior for driving forward will take place in
the action() method. It simply needs to make motors A and C rotate
forward and it&nbsp; exits when &nbsp;the motors are no longer
moving.
This Behavior &nbsp;remains active as long as the motors are
turning.&nbsp;</p>
      <p class="western"><code><span id="Frame1" style="border: 1px solid rgb(0, 0, 0); padding: 0.05in 0.1in; background: rgb(255, 255, 255) none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; float: left; width: 4.3in;" dir="ltr">
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">public void action()
{<br>
      <br>
&nbsp; &nbsp;Motor.A.forward();<br>
&nbsp;&nbsp;&nbsp;Motor.C.forward();<br>
&nbsp; &nbsp;while(Motor.A.isMoving()||
Motor.C.isMoving())&nbsp;
      <br>
&nbsp; &nbsp;&nbsp; &nbsp;Thread.yield(); <span style="color: rgb(51, 204, 0);">// wait for motors to stop</span></font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">}</font></font></p>
      </span></code>
      <br clear="left">
      </p>
      <p class="western">&nbsp;&nbsp;<br>
      </p>
      <p class="body-text-3-western">The&nbsp;
suppress() method, when it is called,&nbsp; will stop this action
very simply as follows:</p>
      <p class="western"><span id="Frame2" style="border: 1px solid rgb(0, 0, 0); padding: 0.05in 0.1in; background: rgb(255, 255, 255) none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; float: left; width: 3.8in; height: 0.8in;" dir="ltr">
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">public void
suppress() {<br>
&nbsp;&nbsp; Motor.A.stop();&nbsp;<br>
&nbsp; &nbsp;Motor.C.stop();</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">}</font></font></p>
      </span><br>
      <br>
      <br>
      </p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western">As we outlined
earlier, this robot will
drive
forward until&nbsp; something else suppresses it, so this Behavior
should always want to take control (it's a bit of a control freak). The
takeControl() method should return true, no matter what is happening.
This may seem counter intuitive, but rest assured that higher level
behaviors will be able to cut in on this behavior when the need arises.
The method appears as follows:</p>
      <p class="western"><span id="Frame3" style="border: 1px solid rgb(0, 0, 0); padding: 0.05in 0.1in; background: rgb(255, 255, 255) none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; float: left; width: 3.59in;" dir="ltr">
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">public boolean
takeControl() {<br>
&nbsp;&nbsp;&nbsp;return true;<br>
}</font></font></p>
      </span><br clear="left">
      </p>
      <p class="body-text-3-western">That's all it takes
to define our first Behavior to drive the robot forward. The complete
code listing for this class is as follows:</p>
      <p class="western"><span id="Frame4" style="border: 1px solid rgb(0, 0, 0); padding: 0.05in 0.1in; background: rgb(255, 255, 255) none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; float: left; width: 4.79in;" dir="ltr">
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">import
lejos.subsumption.*;<br>
import lejos.nxt.*;<br>import lejos.nxt.util.Delay<br>
      <br>
public class DriveForward implements Behavior {<br>
      <br>
&nbsp;&nbsp;&nbsp;public boolean takeControl() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>
&nbsp;&nbsp;&nbsp;}<br>
      <br>
&nbsp;&nbsp;&nbsp;public void suppress() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></font><span dir="ltr"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">Motor.A.stop();<br>
&nbsp;&nbsp; &nbsp; &nbsp;Motor.C.stop();</font></font></span><br>
      <font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;&nbsp;&nbsp;}<br>
      <br>
&nbsp;&nbsp;&nbsp;public void action() {</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;
&nbsp;&nbsp;&nbsp;Motor.A.forward();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.C.forward();<br>
&nbsp;&nbsp; &nbsp; while( Motor.A.isMoving() ||
Motor.C.isMoving()) <br></vr>&nbsp; &nbsp;     Thread.yield();&nbsp;&nbsp; <span style="color: rgb(51, 204, 0);">// wait for motors to stop</span><br>
      </font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;
&nbsp;
}</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">}</font></font></font></font></p>
      </span><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br clear="left">
      </font></font></p>
      <p><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">The
second behavior
is a little more complicated than the first.&nbsp;&nbsp; The
task&nbsp; of this behavior is to &nbsp;detect when an obstacle
has
been struck or is nearby, then back up and turm.&nbsp; In this
example,
we would
like the behavior to take
control &nbsp;when the touch sensor strikes an object or the
ultrasonic
sensor gets an echo from a close object.&nbsp; Here is
the&nbsp;
takeControl() method that does it:</font></font></p>
      <p class="western"><span style="border: 1px solid rgb(0, 0, 0); padding-top: 0.05in; padding-bottom: 0.05in; background-color: rgb(255, 255, 255); background-image: none; background-repeat: repeat; background-attachment: scroll; float: left; width: 5.3in;" id="Frame5" dir="ltr">
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">public boolean
takeControl() {</font></font></font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp; Delay.msDelay(20); <span style="color: rgb(51, 204, 0);">// wait for good data</span><br>
&nbsp;&nbsp;&nbsp; return touch.isPressed() ||
sonar.getDistance() &lt; 25;&nbsp;&nbsp;<br>
}</font></font></font></font></p>
      </span><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br clear="left">
      <br>
      <br>
      </font></font></p>
      <p class="western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">For
the action of this Behavior,&nbsp; we
want the robot
to back up and rotate. We will define the
action() method as follows:</font></font></p>
      <p class="western"><span id="Frame6" style="border: 1px solid rgb(0, 0, 0); padding: 0.05in 0.1in; background: rgb(255, 255, 255) none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; float: left; width: 4.6in;" dir="ltr">
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">public void action()
{</font></font></font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;&nbsp;
Motor.A.rotate(-180,true);<br>
&nbsp;&nbsp;&nbsp;Motor.C.rotate(-360,true);&nbsp;</font></font></font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;
&nbsp;while(Motor.C.isRotatinng())&nbsp;<br>
&nbsp; &nbsp; &nbsp; Thread.yield();
      <span style="color: rgb(51, 204, 0);">&nbsp;//
wait till turn is complete</span></font></font></font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">}</font></font></font></font></p>
      </span><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br clear="left">
      </font></font></p>
      <p class="western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">While
both motors are rotating backward, the robot backs up. When Motor.A
complets its rotation, Motor.C continues so the robot turns.
&nbsp;The
action() method above is the sort of method that runs very quickly and
is usually high priority. We can either stop it dead by
stopping motors, or we could wait for it to complete the
back and turn maneuver. To be consistent with the DriveForward
behavior,
the suppress method stops the motors.&nbsp; &nbsp;If suppress()
is
called, the action method will immediately exit because Motor.C is no
longer rotating.</font></font><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      <br>
      </font></font></p>
      <div id="Frame7" style="border: 1px solid rgb(0, 0, 0); padding: 0.05in 0.1in; background: rgb(255, 255, 255) none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; float: left; width: 3.8in;" dir="ltr">
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">public void
suppress() {</font></font></font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;&nbsp;&nbsp;
Motor.A.stop();<br>
&nbsp; &nbsp; Motor.C.stop();&nbsp; &nbsp;&nbsp;<br>
}</font></font></font></font></p>
      </div>
      <font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br clear="left">
      </font></font>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"> <br>
      <br>
      <br>
The complete listing
for this behavior is as follows:</font></font></p>
      <p class="western"><span id="Frame8" style="border: 1px solid rgb(0, 0, 0); padding: 0.05in 0.1in; background: rgb(255, 255, 255) none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; float: left; width: 5.2in;" dir="ltr">
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">import
lejos.subsumption.*;<br>
      <br>
import lejos.nxt.*;<br>import lejos.util.Delay;<br>
      <br>
public class HitWall implements Behavior {</font></font></font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;&nbsp;&nbsp;public
boolean takeControl() {<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp; &nbsp; Delay.msDelay(20); &nbsp;<span style="color: rgb(51, 204, 0);">// wait for good data</span><br>
&nbsp;&nbsp;&nbsp; &nbsp; return touch.isPressed() ||
sonar.getDistance() &lt; 25;&nbsp;&nbsp;<br>
      <font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;&nbsp;&nbsp;}<br>
      <br>
&nbsp;&nbsp;&nbsp;public void suppress() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Motor.A.stop();</font></font><br>
&nbsp; &nbsp; &nbsp; Motor.C.stop();<font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
&nbsp;&nbsp;&nbsp;}</font></font></font></font></font></font></font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font><span id="Frame6" dir="ltr">
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">public void action()
{</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">
&nbsp;&nbsp;// Back up:</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;&nbsp;
Motor.A.rotate(-180,true);<br>
&nbsp;&nbsp;&nbsp;Motor.C.rotate(-360,true);</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;
&nbsp;// wait for turn to be complete</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;
&nbsp;while( Motor.C.isRotating()) Thread.yield();
&nbsp;</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">}</font></font></p>
      </span><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;&nbsp; }</font></font></font></font></font></font></font></font></p>
      <p style="margin-top: 0.02in;"><span id="Frame4" dir="ltr"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;
private
TouchSensor
touch;<br>
&nbsp; private UltrasonicSensor sonar;</font></font></font></font></font></font></font></font></span></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">}</font></font></font></font></font></font></font></font></p>
      </span><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br clear="left">
      <br>
      <br>
      </font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">We now have our two
behaviors defined, and it's a simple matter to make a class with a
main() method to get things started. All we need to do is create an
array of our Behavior objects, and instantiate and start the Arbitrator
as shown in the following code listing:</font></font></font></font></font></font></p>
      <p class="western"><span style="border: 1px solid rgb(0, 0, 0); padding-top: 0.05in; padding-bottom: 0.05in; background-color: rgb(255, 255, 255); background-image: none; background-repeat: repeat; background-attachment: scroll; float: left; width: 4.64in;" id="Frame9" dir="ltr">
      <p style="margin-top: 0.02in; width: 726px;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">import
lejos.subsumption.*;<br>
      <br>
public class BumperCar {<br>
&nbsp;&nbsp;&nbsp;public static void main(String [] args) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior b1
= new DriveForward();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior b2
= new HitWall();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior []
behaviors = {b1, b2};<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Arbitrator
arbitrator = new Arbitrator(behaviors);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; arbitrator.start();<br>
&nbsp;&nbsp;&nbsp;}<br>
}</font></font></font></font></font></font></font></font></p>
      </span><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br clear="left">
      </font></font></font></font></font></font></p>
      <p class="western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      <br>
      </font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">The above code is
fairly easy to understand. The first two lines in the main() method
create an instances of each Behavior. The third line places them into
an
array, with the lowest priority behavior taking the lowest array index.
The fourth line creates the Arbitrator, and the fifth line starts the
Arbitration process. When this program is started the robot will scurry
forwards until it detects or bangs into an object, then it will
retreat, rotate,
and continue with its forward movement until the power is shut off.</font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">This seems like a
lot
of extra work for two simple behaviors, but now let's see how easy it
is to insert a third behavior without altering any code in the other
classes. This is the part that makes behavior control systems very
appealing for robotics programming. Our third behavior could be just
about anything. We'll have this new behavior monitor the battery level
and play a tune and stops the program when it dips below a certain
level. Examine the
completed Behavior:</font></font></font></font></font></font></p>
      <p class="western"><span id="Frame10" style="border: 1px solid rgb(0, 0, 0); padding: 0.05in 0.1in; background: rgb(255, 255, 255) none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; float: left; width: 5.96in;" dir="ltr">
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">import
lejos.subsumption.*;<br>
import lejos.nxt.*;<br>
      <br>
public class BatteryLow implements Behavior {<br>
&nbsp;&nbsp;&nbsp;private float LOW_LEVEL;<br>
&nbsp;&nbsp;&nbsp;private static final short [] note = {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2349,115,
0,5, 1760,165, 0,35, 1760,28, 0,13, 1976,23,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,18,
1760,18, 0,23, 1568,15, 0,25, 1480,103, 0,18,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1175,180,
0,20, 1760,18, 0,23, 1976,20, 0,20, 1760,15,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,25,
1568,15, 0,25, 2217,98, 0,23, 1760,88, 0,33, 1760,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;75, 0,5,
1760,20, 0,20, 1760,20, 0,20, 1976,18, 0,23,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1760,18,
0,23, 2217,225, 0,15, 2217,218};</font></font></font></font></font></font></font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;
&nbsp; private boolean suppressed = false;</font></font></font></font></font></font></font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
&nbsp;&nbsp;&nbsp;public BatteryLow(float volts) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOW_LEVEL =
volts;<br>
&nbsp;&nbsp;&nbsp;}<br>
      <br>
&nbsp;&nbsp;&nbsp;public boolean takeControl() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
Battery.getVoltage() &lt; LOW_LEVEL;<br>
&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;public void suppress() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; suppressed = true;<br>
&nbsp;&nbsp;&nbsp;}<br>
      <br>
&nbsp;&nbsp;&nbsp;public void action() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;play();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<br>
&nbsp;&nbsp;&nbsp;}<br>
      <br>
&nbsp;&nbsp;&nbsp;public static void play() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int
i=0;i&lt;note.length; i+=2) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final
short w = note[i+1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sound.playTone(note[i],
w);<br>
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
Sound.pause(w*10);<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (suppressed)
return; <br>
&nbsp;&nbsp;&nbsp;}<br>
}</font></font></font></font></font></font></font></font></p>
      </span><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br clear="left">
      <br>
      <br>
      </font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">The complete tune is
stored in the note array at line 6 and the method to play the notes is
at line 30. This behavior will take control only if the current battery
level is less the voltage specified in the constructor. The action()
and
suppress() methods are comparatively easy. Action plays a tune, then
exits the program when it is furnished. Since this
behavior stops the program, there would be no need for a suppress()
method unless the robot hit a wall while the tune is playing.
&nbsp;So just in case, &nbsp;we declare a boolean flag&nbsp;<span style="font-style: italic;">suppress&nbsp;</span>
which is set by the suppress() method and tested by the play() method
so it can interrupt the tune if a wall has been detected or
hit.&nbsp; </font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">To insert this
Behavior into our scheme is a trivial task. We simply alter the code of
our main class as follows:</font></font></font></font></font></font></p>
      <p class="western"><span style="border: 1px solid rgb(0, 0, 0); padding-top: 0.05in; padding-bottom: 0.05in; background-color: rgb(255, 255, 255); background-image: none; background-repeat: repeat; background-attachment: scroll; float: left; width: 4.8in;" id="Frame11" dir="ltr">
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">public class
BumperCar {<br>
&nbsp;&nbsp;&nbsp;public static void main(String [] args) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior b1
= new DriveForward();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior b2
= new BatteryLow(7.1f);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior b3
= new HitWall();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior []
behaviors = {b1, b2, b3};<br>
&nbsp;&nbsp; &nbsp; &nbsp;Arbitrator arbitrator = new
Arbitrator(behaviors);<br>
&nbsp;&nbsp; &nbsp; &nbsp;arbitrator.start();<br>
&nbsp;&nbsp;&nbsp;}<br>
} </font></font> </font></font></font></font></font></font></p>
      </span><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br clear="left">
      <br>
      <br>
      </font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">Note: The voltage
level of the NXT at rest is different from the voltage when in action.
The voltage level at rest might be 7.8 V, but when motors are activated
they naturally cause a drop in the voltage reading. Make sure the
voltage threshold used in the BatteryLow constructor is low enough.</font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">This example
beautifully demonstrates the real benefit of behavior control coding.
Inserting a new behavior, no matter what the rest of the code looks
like, is simple. The reason for this is grounded in object oriented
design; each behavior is a self contained, independent object.</font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">TIP: When creating a
behavior control system, it is best to program each behavior one </font></font></font></font></font></font><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">at
a
time and test them individually. If you code all the behaviors and then
upload them all at once to the NXT brick, there is a good chance a bug
will exist somewhere in the behaviors, making it difficult to locate.
By programming and testing them one at a time it makes it easier to
identify where the problem was introduced.</font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">Behavior coding is
predominantly used for autonomous robots - robots that work
independently, on their own free will. A robot arm controlled by a
human would likely not use behavior programming, although it would be
possible. For example, a robot arm with four joystick movements could
have a behavior for each direction of movement. But as you may recall,
behaviors are ordered with the highest order taking precedence over
lower order behaviors. Who is to say that pushing left on the joystick
would take precedence over pushing up? In other words, behavior control
in anything other than autonomous robots is largely overkill.</font></font></font></font></font></font></p>
      <p class="western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font color="#0000ff"><u><a href="#_top">Back
to Top</a></u></font></font></font></font></font></font></font></p>
      <h2 class="western" lang="en-GB"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><a name="1.3.Advanced Behavior Coding|outline"></a>
      <big><big><big>Advanced Behavior Coding</big></big></big></font></font></font></font></font></font></h2>
      <p class="body-text-2-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">It would be nice if
all behaviors were as simple as the examples given above, but in more
complex coding there are some unexpected problems that can sometimes be
introduced. Threads, for example, can sometimes be difficult to halt
from the suppress() method, which can lead to two different threads
fighting over the same resources - often the same motor!&nbsp;</font></font></font></font></font></font></p>
      <p class="body-text-2-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">
       These is the kind of problem the
leJOS Behavior Control API tries to address. &nbsp;This
section, 
introduces a design pattern that avoids some of the pitfalls in
addressing these problems.&nbsp;</font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <h3 class="western" lang="en-GB"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><a name="Coding_Solid_Behavior_Methods"></a>
Coding Solid Behavior Methods</font></font></font></font></font></font></font></font></font></font></h3>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">In order to code
reliable&nbsp; action() and suppress() pairs, it is necessary to
understand
how arbitration works. &nbsp;Arbitrator contains a Monitor thread
that cycles through each of the Behaviors,
checking the takeControl() method to see if&nbsp; the
Behavior should become active.&nbsp;&nbsp; It starts with
Behavior of
largest index (because they are are stored in increasing priority
order)&nbsp;and goes down to the lowest index. As soon as it comes
across a Behavior that should take control, this is the highest
priority
Behavior at the moment.&nbsp; If this behavior has higher priority
than the active Behavior,&nbsp; the Arbitrator
executes suppress() on the active Behavior, and then starts
      </font></font></font></font></font></font></font></font></font></font><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">checking
each
behavior </font></font></font></font></font></font></font></font></font></font><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">from
the top again.
The main thread of the Arbitrator is very simple.
&nbsp;It just calls&nbsp; the action() method on the highest
priority Behavior, (as determined by the Monitor
thread) and that Behavior&nbsp;becomes the active.&nbsp;
When action() exits, &nbsp;that&nbsp; Behavior is no longer
active, and&nbsp;the loop continues. &nbsp;But if the formerly
active Behavior should become active
again, and no other higher index behavior should, &nbsp;then
action() will be called again on that same Behavior.</font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">The <a name="recommended_design_pattern"></a><span style="font-weight: bold;">recommended
design pattern</span> for Behavior coding was illustrated by the
BatteryLow
behavior. &nbsp;It has a boolean flag that is set by the suppress()
method.&nbsp;</font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-2-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">The action() method
must
test this
flag in every loop &nbsp;in order&nbsp;to guarantee that it
will&nbsp; exit
promptly when suppress() is called. &nbsp;The action() method
might be quite complex, such as a separate thread for line tracking or
wall following, but it must be coded to ensure prompt exit from
action() when necessary. &nbsp;Below are examples of the other
BumperCar behaviors revised according to this design pattern.&nbsp;</font></font></font></font></font></font></font></font></font></font><br>
.</p>
      <p style="text-align: left; text-decoration: underline;" class="body-text-2-western"><span style="font-weight: bold;">Revised
&nbsp;DriveForward:</span> </p>
      <p class="body-text-2-western"><span id="Frame4" style="border: 1px solid rgb(0, 0, 0); padding: 0.05in 0.1in; background: rgb(255, 255, 255) none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; float: left; width: 4.79in;" dir="ltr">
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">import
lejos.subsumption.*;<br>
import lejos.nxt.*;<br>
      <br>
public class DriveForward&nbsp; implements Behavior {<br>
      <br>
&nbsp;&nbsp; private boolean suppressed = false;</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;&nbsp;</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;public
boolean takeControl() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>
&nbsp;&nbsp;&nbsp;}<br>
      <br>
&nbsp;&nbsp;&nbsp;public void suppress() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; suppressed = true;</font></font><span dir="ltr"></span><br>
      <font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;&nbsp;&nbsp;}<br>
      <br>
&nbsp;&nbsp;&nbsp;public void action() {</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;
&nbsp;&nbsp; suppressed = false;</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;
&nbsp; &nbsp;Motor.A.forward();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.C.forward();<br>
&nbsp;&nbsp; &nbsp; while( !suppressed )
Thread.yield();&nbsp;</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;
&nbsp; &nbsp;Motor.A.stop(); <span style="color: rgb(51, 204, 0);">//
clean up</span><br>
&nbsp; &nbsp;&nbsp; Motor.C.stop();</font></font></p>
      </span></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;&nbsp;
      <br>
      </font></font></p>
      <p style="margin-top: 0.02in;"><br>
      </p>
      <p></p>
   
      <p class="body-text-3-western"><br clear="all">
      </p>
      <p style="text-align: left; font-weight: bold;" class="body-text-3-western">Revised
HitWall:</p>
      <p class="body-text-3-western"> <span id="Frame8" style="border: 1px solid rgb(0, 0, 0); padding: 0.05in 0.1in; background: rgb(255, 255, 255) none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; float: left; width: 4.57in;" dir="ltr">
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">import
lejos.subsumption.*;<br>
      <br>
import lejos.nxt.*;<br>
      <br>
      import lejos.util.Delay; <br><br></br>
public class HitWall implements Behavior {</font></font></font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;</font></font></font></font><span id="Frame8" dir="ltr"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><span id="Frame6" dir="ltr"> private
boolean suppressed = false;<br>
      <span id="Frame4" dir="ltr"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp; private
TouchSensor
touch;<br>
&nbsp; private UltrasonicSensor sonar;</font></font></font></font></font></font></font></font></span></span></font></font></font></font></font></font></span><br>
      <span id="Frame8" dir="ltr"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><span id="Frame6" dir="ltr"><span id="Frame4" dir="ltr"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp; private
boolean suppressed = false;</font></font></font></font></font></font></font></font></span></span></font></font></font></font></font></font></span></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;&nbsp;&nbsp;public
boolean takeControl() {<br>
&nbsp;&nbsp; &nbsp; &nbsp;<span sonar.ping=""><br>
&nbsp;&nbsp;&nbsp; &nbsp; Delay.msDely(20); &nbsp;<span style="color: rgb(51, 204, 0);">// wait for good data</span><br>
&nbsp;&nbsp;&nbsp; &nbsp; return touch.isPressed() ||
sonar.getDistance() &lt; 25;&nbsp;&nbsp;</span><br>
      <font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;&nbsp;&nbsp;}<br>
      <br>
&nbsp;&nbsp;&nbsp;public void suppress() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; suppressed = true;</font></font><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
&nbsp;&nbsp;&nbsp;}</font></font></font></font></font></font></font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font><span id="Frame6" dir="ltr">
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">public void action()
{</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">
&nbsp;&nbsp;// Back up &nbsp;and turn</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp; &nbsp;suppress = false;</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;&nbsp;
Motor.A.rotate(-180,true);<br>
&nbsp;&nbsp;&nbsp;Motor.C.rotate(-360,true);</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;
&nbsp;while( Motor.C.isRotating() &amp;&amp; !suppressed )
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Thread.yield();
&nbsp;</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp;
&nbsp;Motor.A.stop(;<br>
&nbsp; &nbsp;Motor.C.stop();</font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp; }</font></font>&nbsp;&nbsp;</p>
      </span>
      </font></font></font></font></font></font></p>
      <p style="margin-top: 0.02in;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">}</font></font></font></font></font></font></font></font></p>
      </span></p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western"></p>
      <p class="body-text-3-western"><a name="Examples2"></a></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"></font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"></font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"></font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"></font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"></font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"></font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"></font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      <br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">&nbsp; <br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><a name="Examples2"></a><br>
      <font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">As you can see from
these examples, the motor shutdown code&nbsp; that was in
suppress()
has been
moved to the end of action().  
In this pattern,&nbsp;it is the
responsibility of the action() method to do any clean up work so that
no side effects are left that might interfere with the next Behavior
to become active. The danger of a side effect may not be obvious.
&nbsp;</font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">Suppose, for
example,
in the DriveForward behavior, the action() method does not test
the&nbsp; <span style="font-style: italic;"><span style="font-style: italic;">suppressed</span></span>
&nbsp;flag but instead&nbsp; starts the motors driving forward
and then exits,
leaving the side effect of motors running.&nbsp; If a higher
priority Behavior should take control, there is no problem.
Otherwise,&nbsp; DriveForward.action() will&nbsp; immediately
be called again. So where is the problem? &nbsp;Answer:&nbsp;
Repeated calls of any Motor method will reduce the accuracy of motor
speed regulation. Speed regulation works by comparing the total motor
rotation with the desired speed times elapsed time, and adjusting power
to reduce the error.&nbsp; Each call to a Motor method resets the
origin of both elapsed time and rotation count, so calling a motor
method every few milliseconds soon makes speed regulation ineffective.
&nbsp;If the motors do not run at the same speed, the
robot will not move in a straight line. &nbsp;So if you want your
robot to run straight, be careful about how you code your action()
methods. &nbsp;</font></font></font></font></font></font></font></font></font></font></p>
      <p class="body-text-3-western"><span style="font-family: &quot;Times New Roman&quot;,serif;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">One
advantage of
using this design pattern is that each Behavior is coded in the same
way without making any assumptions about its
priority. &nbsp;You can then change the priority order of your
behaviors&nbsp;or reuse them in
other applications without
reprogramming any of them.</font></font></font></font></font></font></font></font></font></font></span></p>
      <span style="font-family: &quot;Times New Roman&quot;,serif;"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></span>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">Note: If you would
like to remove any mystery about what goes on in the Arbitrator class,
take a look at the source code located in
src/classes/lejos/subsumption/Arbitrator.java.</font></font></font></font></font></font></font></font></font></font></p>
      <font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font>
      </font></font></font></font></font></font></font></font>
      <h3 class="western" lang="en-GB"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><a name="1.3.3.Summary|outline"></a> Summary</font></font></font></font></font></font></font></font></font></font></h3>
      <p class="body-text-3-western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2">So
why use the
Behavior API? The best reason is because in programming we strive to
create the simplest, most powerful solution possible, even if it takes
slightly more time. The importance of reusable, maintainable code has
been demonstrated repeatedly in the workplace, especially on projects
involving more than one person. If you leave your code and come back to
it several months later, the things that looked so obvious suddenly
don't anymore. With Behavior control, you can add and remove behaviors
without even looking at the rest of the code, even if there are many
behaviors in the program. You can confidently do this if all your
Behaviors follow the recommended design pattern, which means that there
are side conditions that can interfere with the next Behavior to become
active.&nbsp; Another big
plus of behavior control is
programmers can exchange Behaviors with each other easily, which
fosters code re usability. Hundreds of interesting, generic behaviors
could be uploaded to websites, and you could simply pick the behaviors
you want to add to your robot (assuming your robot is the correct type
of robot). This&nbsp; re-usability of code can be taken forward
even more by
using standard leJOS NXJ classes such as the Navigation API.</font></font></font></font></font></font></font></font></font></font></p>
      <p class="western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      <br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font color="#0000ff"><u><a href="#_top">Back
to Top</a></u></font></font></font></font></font></font></font></font></font></font></font></p>
      <p class="western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      <br>
      </font></font></font></font></font></font></font></font></font></font></p>
      <p class="western"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><font face="Courier New, monospace"><font style="font-size: 9pt;" size="2"><br>
      </font></font></font></font></font></font></font></font></font></font></p>
      </td>
      </td>
      
    </tr>
  </tbody>
</table>
<p class="western"><br>
<br>
</p>
</body>
</html>
