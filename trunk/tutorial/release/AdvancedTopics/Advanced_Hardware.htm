<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" xml:lang="en" lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title>Advanced Motors, Sensors and Third Party Hardware</title>

	<!-- METADATA -->
	<meta name="title" content="Advanced Motors, Sensors and Third Party Hardware" />
	<meta name="DC.Title" content="Advanced Motors, Sensors and Third Party Hardware" />
	<meta http-equiv="title" content="Advanced Motors, Sensors and Third Party Hardware" />
	
	<meta name="description" content="Advanced Motors, Sensors and Third Party Hardware" />
	<meta http-equiv="description" content="Advanced Motors, Sensors and Third Party Hardware" />
	<meta http-equiv="DC.Description" content="Advanced Motors, Sensors and Third Party Hardware" />

	<meta name="keywords" content="Java, leJOS, leJOS project, NXJ, NXJ Tutorial" />
	<meta http-equiv="keywords" content="Java, leJOS, leJOS project, NXJ, NXJ Tutorial" />

	<meta name='VW96.objecttype' content='Document' />
	<meta http-equiv='content-language' content='en'/>
	<meta name='DC.Language' scheme='RFC1766' content='English' />
	<meta name='distribution' content='global' />
	<meta name='resource-type' content='document' />

	<!-- SEARCH ENGINE -->
	<meta name='robots' content='all' />

	<!-- AUTHOR METADATA -->	
	<meta name="Author" content="Lawrie Griffiths"/>		

	<!-- CSS -->
	<link rel="stylesheet" href="../r_css/lejos-tutorial.css" type="text/css" />

	<!-- ICON -->
	<link rel="shortcut icon" href="../favicon.ico" type="image/x-icon" />
</head>
<body>
	<a id="top" name="top"></a>
	<!-- N1: HEADER -->
	<table cellpadding="0" cellspacing="0" class="n1t1">
		<tr>
			<td><img src="../r_media/images/tutorial_header1.jpg" /></td>
			<td align="right"><img src="../r_media/images/tutorial_header2.jpg" /></td>
		</tr>
	</table>
	<!-- N2: CONTENTS -> NAVIGATION SYSTEMS AND CONTENTS -->
	<table cellpadding="0" cellspacing="0" class="n2t1">
		<tr>
			<td class="n2t1r1c1">
				<!-- LEFT NAVIGATION SYSTEM -->
				<div class="nolinkLESSON">Advanced Motors, Sensors and Third Party Hardware</div>
				<div class="linkAHEAD"><a href="#1">Motor interfaces</a></div>
				<div class="linkAHEAD2"><a href="#1.1">BaseMotor</a></div>
				<div class="linkAHEAD2"><a href="#1.2">DCMotor</a></div>
				<div class="linkAHEAD2"><a href="#1,3">Encoder</a></div>
				<div class="linkAHEAD2"><a href="#1,3">EncoderMotor</a></div>
				<div class="linkAHEAD2"><a href="#1.4">Tachometer</a></div>
				<div class="linkAHEAD2"><a href="#1.5">RegulatedMotor</a></div>
				<div class="linkAHEAD"><a href="#2">Unregulated Motor classes</a></div>
				<div class="linkAHEAD"><a href="#3">Regulated Motor classes</a></div>
				<div class="linkAHEAD"><a href="#4">Motor Port classes</a></div>
				<div class="linkAHEAD"><a href="#5">PF Motors</a></div>
				<div class="linkAHEAD"><a href="#6">Servos and Linear Actuators</a></div>
				<div class="linkAHEAD"><a href="#7">Motor multiplexers</a></div>
				<div class="linkAHEAD"><a href="#8">Sensor Ports</a></div>
				<div class="linkAHEAD"><a href="#9">Sensors</a></div>
				<div class="linkAHEAD"><a href="#10">RCX Sensors</a></div>
				<div class="linkAHEAD2"><a href="#10.1">RCX Light Sensor</a></div>
				<div class="linkAHEAD2"><a href="#10.2">RCX Touch Sensor</a></div>
				<div class="linkAHEAD2"><a href="#10.3">RCX Rotation Sensor</a></div>
				<div class="linkAHEAD2"><a href="#10.4">RCX Temperature Sensor</a></div>
				<div class="linkAHEAD"><a href="#11">Third	Party sensors and other devices</a></div>
				<div class="linkAHEAD"><a href="#12">I2CSensor</a></div>
				<div class="linkAHEAD"><a href="#13">I2CPort</a></div>
			</td>
			<td>
        		<div id="BreadCrumbs">
            		<a href="../index.htm" target="_top">Home Page</a>
        			&gt;
            		<a href="#">Advanced Motors, Sensors and Third Party Hardware</a>
        		</div>
        		<div class="NavBit">
                    <a target="_top" href="../Utilities/LejosUtilities.htm">&laquo;&nbsp;Previous</a>&nbsp;&#8226;&nbsp;<a href="../index.htm">TOC</a>&nbsp;&#8226;&nbsp;<a href="../AdvancedTopics/UnderstandingFilesLCPMemTools.htm">Next&nbsp;&raquo;</a>
        		</div>
        		
				<!-- CONTENT TITLE -->
        		<div id="PageTitle">Advanced Motors, Sensors and Third Party Hardware</div>

				<a name="1"></a>
				<h4>Motor interfaces</h4>
				
				<p>leJOS supports a variety of motors, including the NXT motors, RCX motors,
				   PF motors, and a variety of servos. It supports them directly attached to a NXT
				   motor port, or connected by a multiplexer, or via RCX or PF converter cables, or connected to 
				   a remote NXT via Bluetooth or RS485, or connected to a remote RCX via an infrared
				   link.</p>
				   
				<p>To help classify the types of motor, there are a set of motor interfaces in the lejos.robotics packages.
				 These interfaces allow you to write programs that are essentially independent of the specific
				 type of motor used and the way it is connected. It is only the constructor for the a specific
				 motor and its connection that needs to change to use another type of motor or connection.</p>
				 
				<a name="1.1"></a>
				<h5>BaseMotor</h5>
				 
				<p>The simplest interface that all motors implement is BaseMotor. It supports the methods:</p>
				
				<ul class="BlueArrows">
					<li>public void forward()</li>
					<li>public void backward()</li>
					<li>public boolean isMoving()</li>
					<li>public void flt()</li>
					<li>public void stop()</li>
				</ul>
				
				<p>All leJOS NXJ motors implement this interface. However, servo motors are not currently supported as 
				they do not normally support these methods.</p>
				
				<a name="1.2"></a>
				<h5>DCMotor</h5>
				
				<p>The DCMotor interface extends BaseMotor and adds methods for setting the power
				and getting the current power setting. It is used for unregulated motors.</p>
				
				<ul class="BlueArrows">
					<li>public void setPower(int power)</li>
					<li>public int getPower()</li>
				</ul>
				
				<p>Unregulated motors without encoders, such as the RCX motor, support this interface.</p>
				
				<a name="1.3"></a>
				<h5>Encoder</h5>
				
				<p>Some motors, such as the NXT motors, have built in encoders. The Encoder interfaces
				defines the methods that these support.</p>
				
				<ul class="BlueArrows">
					<li>public int getTachoCount();</li>
					<li>public void resetTachoCount();</li>
				</ul>
				
				<a name="1.4"></a>
				<h5>EncoderMotor</h5>
				
				<p>The EncoderMotor interface extends DCMotor and Encoder and adds no new methods. It is used for
				unregulated motors with encoders. The NXTMotor class implements this interface.</p>
				
				<a name="1.5"></a>
				<h5>TachoMeter</h5>
				
				<p>Tachometers are more sophisticated encoders that not only give a tachometer
				count, but also continuously monitor the tachometer readings to give a rotation speed.
				They are implemented in software for NXT motors. The tachometer interface extends Encoder and adds:</p>

				<ul class="BlueArrows">
					<li>public int getRotationSpeed();</li>
				</ul>
				
				<a name="1.6"></a>
				<h5>RegulatedMotor</h5>
				
				<p>The RegulatedMotor interface is used for motors that implement speed regulation and stopping
				at a defined encoder count, such as the NXTRegulatedMotor class that implements the interface
				for NXT motors.</p>
				
				<p>The RegulatedMotor interface extends BaseMotor and Tachometer and adds the following methods:</p>
				
				<ul class="BlueArrows">
					<li>public void addListener(RegulatedMotorListener listener);</li>
					<li>public int getLimitAngle(;)</li>
					<li>public float getMaxSpeed();</li>
					<li>public int getSpeed();</li>
					<li>public boolean isStalled();</li>
					<li>public void rotate(int angle);</li>
					<li>public void rotate(int angle, boolean immediateReturn);</li>
					<li>public void rotateTo(int limitAngle);</li>
					<li>public void rotateTo(int limitAngle, boolean immediateReturn);</li>
					<li>public void setAcceleration(int acceleration);</li>
					<li>public void setSpeed(int speed);</li>
					<li>public void stop(boolean immediateReturn);</li>
					<li>public void waitComplete();</li>
				</ul>
				
				<p>NXTRegulatedMotor (which is the class of Motor.A, Motor.B, and Motor.C) support this interface. RemoteMotor
				also supports it but with some restrictions.</p>
				
				<a name="1.7"></a>
				<h5>RegulatedMotorListener</h5>
				
				<p>Regulated motors must generate events when the motor starts and stops. Classes that listen for these
				events implement the RegulatedMotorListener interface, which has the methods:</p>
				
				<ul class="BlueArrows">
					<li>public void rotationStarted(RegulatedMotor motor, int tachoCount, boolean stalled, long timeStamp);</li>
					<li>public void rotationStopped(RegulatedMotor motor, int tachoCount, boolean stalled, long timeStamp);</li>
				</ul>
				
				<p>DifferentialPilot is an example of a class that supports this interface.</p>

				<p><a href="#top">Back to top</a></p>
								
				<a name="2"></a>
				<h4>Unregulated Motor classes</h4>
				
				<a name="2.1"></a>
				<h5>BasicMotor</h5>				

				<p>As well as the interface defined above, leJOS has an abstract motor class that simplify the implementation of 
				the unregulated motor classes.</p>
				
				<p>BasicMotor is an abstract class which implements the DCMotor interface, and provide methods common to all implementations of unregulated motors.</p>
				
				<a name="2.2"></a>
				<h5>NXTMotor</h5>
				
				<p>NXTMotor is a very simple implementation of an unregulated motor for NXT motors. It extends BasicMotor and implements
				the Encoder interface method, and therefore implements the EncoderMotor interface.</p>
				
				<p>It is used for applications such as Segway robots that need to directly control the power supplied to the NXT motors,
				and do not need speed regulation or rotation to a limit point.</p>
				
				<p>To use an NXTMotor you create an
				instance of the NXTMotor class using one of the constructors:</p>
				
				<ul class="BlueArrows">
					<li>public NXTMotor(TachoMotorPort port);</li>
					<li>public NXTMotor(TachoMotorPort port, int PWMMode);</li>
				</ul>
				
				<p>Example:</p>
				
				<div class="CodeBox">
				<pre><code>
NXTMotor m1 = new NXTMotor(MotorPort.A);				
				</code></pre>
				</div>
						
				<a name="2.3"></a>
				<h5>RCXMotor</h5>	
			
				<p>The RCX motors do not have an in-built
				tachometer and so cannot support the advanced functions of the NXT
				motors such as the rotate and rotateTo methods and the speed
				regulation.</p>
			
				<p>A simpler class is used to support
				the RCX motors. It has similar methods to the Motor class in the
				RCX version of leJOS (which are the same as those supported by the BasicMotor class).</p>
			
				<p>To use an RCX motor you create an
				instance of the RCXMotor class using the constructor:</p>
				
				<ul class="BlueArrows">
					<li>public RCXMotor(BasicMotorPort port)</li>
				</ul>
				
				<p>Example:</p>
				
				<div class="CodeBox">
				<pre><code>
RCXMotor rcxMotor = new RCXMotor(MotorPort.A);				
				</code></pre>
				</div>
				
				<p>You can use RCX Motors with leJOS NXJ by connecting them with the conversion cables that can be purchased from 
				LEGO (and are bundled with the LEGO MINDSTORMS NXT educational kits). You can also use the RCXMotor class to control
				RCX motors connected to a remote RCX - see the "Communications" tutorial.</p>
				
				<p>RCXMotor extends BasicMotor and therefore implements the DCMotor interface.</p>
				
				<p>RCX motors can be connected to a sensor port via the RCXMotorMultiplxer device.
				This allows up to 4 RCX motors to be connected and thus entends the number of motors
				that a NXT can support.</p>
				
				<p>RCX Motors can be attached to RCX bricks and controlled remotely via the
				Mindsensors NRLink device using the RCXRemoteMotorPort class.</p>

				<p><a href="#top">Back to top</a></p>
				
				<a name="3"></a>
				<h4>Regulated motor classes</h4>	
			
				<p>The NXTRegulatedMotor class controls the NXT motors, and is
				described in <a href="../MotorTutorial/ControllingMotors.htm">Controlling the Motors</a>. It implements
				speed regulation and rotation by a specified number of degrees. Motor.A, Motor.B and Motor.C are instances of NXTRegulatedMotor.</p>
					
				<p>RemoteMotor also implements the RegulatedMotor class but with restrictions. It sends LCP commands to a remote NXT,
				which uses an instance of NXTRegulatedMotor to implement them. RemoteMotor is available on the NXT and on the PC (via the pccomms API).
				On the PC, Motor.A, Motor.B and Motor.C are instances of RemoteMotor.</p>
				
				<p>On the NXT, RemoteMotor can be used to control motors on another NXT either over Bluetooth, or using RS485, 
				by connecting port 4 of the two NXTs via a NXT cable. RS485 has lower latency than Bluetooth, so the motors will be
				more responsive over RS485.</p>

				<p><a href="#top">Back to top</a></p>
								
				<a name="4"></a>
				<h4>MotorPort classes</h4>
				
				<p>To use the NXT motors it is not
				necessary to explicitly use the MotorPort class: you can just use
				the variables Motor.A, Motor.B and Motor.C.   So if you are only
				using NXT motors, you can skip this section.</p>
				
				<p>However it is useful to understand how motor ports work as they are used by:</p>
				
				<ul class="BlueArrows">
					<li>The NXTRegulatedMotor class</li>
					<li>The RCXMotor class</li>
					<li>The RemoteNXT class</li>
					<li>The RCXMotorMultiplexer class</li>
					<li>Remote RCX motors accessed via the RCXLink class</li>
				</ul>
				
				<p>There is a hierarchy of interfaces defined for motor ports:</p>
				
				<ul class="BlueArrows">
					<li>BasicMotorPort</li>
					<li>Tachometer</li>
					<li>TachoMotorPort</li>
				</ul>
				
				<p>All motor ports support the
				BasicMotorPort interface which allows control of a motors power
				and mode (forward, backward, stop, float).</p>
				
				<p>Ports that supports this include:</p>
				
				<ul class="BlueArrows">
					<li>NXT ports connected to NXT motors</li>
					<li>NXT ports connected via the RCX conversion cable to RCX motors</li>
					<li>Ports on the RCXMotorMultiplexer adapter</li>
					<li>Ports on remote NXTs accessed via the RemoteNXT class</li>
					<li>Ports on remote RCXs accessed via the RCXLink class</li>
				</ul>
				
				<p>The implementations of BasicMotorPort include:</p>
				
				<ul class="BlueArrows">
					<li>MotorPort</li>
					<li>PFMotorPort</li>
					<li>RemoteMotorPort</li>
					<li>RCXPlexedMotorPort</li>
					<li>RCXRemoteMotorPort</li>
				</ul>

				<p>The tachometers that are built in to the NXT motors support the Tachometer interface.</p>
				
				<p>NXT motor ports support the TachoMotorPort interface which includes the BasicMotorPort and Tachometer interfaces.</p>
				
				<p>Implementations of TachoMotorPort include:</p>
				
				<ul class="BlueArrows">
					<li>MotorPort</li>
					<li>RemoteMotorPort</li>
				</ul>

				<p>All this sounds rather complicated, but is simple to use:</p>
				
				<ul class="BlueArrows">
					<li>For NXT motors, you use Motor.A, Motor.B and Motor.C</li>
					<li>For RCX motors connected by the conversion cable you use RCXMotor(MotorPort.A), RCXMotor(MotorPort.B) or
						RCXMotor(MotorPort.C)</li>
					<li>For NXT motors on a remote NXT, you use remoteNXT.Motor.A, remoteNXT.Motor.B or remoteNXT.Motor.C where
						remoteNXT is an instance of RemoteNXT.</li>
					<li>For RCX motors connected by the RCX Motor Multiplexer, you use rcxMotorMultiplexer.A,
						rcxMotorMultiplexer.B, rcxMotorMultiPlexer.C or	rcxMotorMultiplexer.D, 
						where rcxMotorMultiplexer is an instance of RCXMotorMultiPlexer.</li>
					<li>For RCX motors connected t remote RCXs via the RCXLink class you use rcxLink.A, rcxLink.B or rcxLink.C where
						rcxLink is an instance of the RCXLink class.</li>
				</ul>
				<p><a href="#top">Back to top</a></p>
				
				<a name="5"></a>
				<h4>LEGO Power Function motors</h4>
				
				<p>LEGO PF motors can be controlled by leJOS NXJ in a variety of ways. They can be directly connected to the NXT via 
				converter cables, or they can be controlled remotely using their IR receivers use several different third party devices.</p>
				
				<p>If you use converter cables, then PF motors are best driven using the RCXMotor class.</p>
				
				<p>To drive PF Motors remotely, via the IR Receiver, three different devices can be used. </p>
				
				<p>The Mindsensors PFMate device is designed to drive PF motors directly. This device is supported by the PFMate and PFMateMotor
				classes. PFMate implements the DCMotor interface, and therefore provides similar methods to RCXMotor.</p>
				
				<p>Using the HiTechnic IRLink device, one way to drive PF motors is to use the PFMotorPort class. This provides a BasicMotorPort interface
				and so can be used as the BasicMotorPort parameter for the RCXMotor constructor. This allows RCXMotor to drive 
				remotely connected PF motors. Another option is to use the methods of the PFLink class directly. This gives greater
				control but the methods are specific to this device.</p>
				
				<p>A third device that can be used to drive PF motors is the Mindsensors NRLink. The PFLink 
				class can be used to drive this device and send commands to the PF motors. The methods are specific
				to this device and none of the motor or motor port interfaces are supported.</p>

				<p><a href="#top">Back to top</a></p>

				<a name="6"></a>
				<h4>Servos and Linear Actuators</h4>
				
				<p>leJOS NXJ has several classes in lejos.nxt.addon to support Servo motors.</p>
				
				<p>The Mindsensors MSC8 device is supported by the MSC and MServo classes. MSC represents the controller,
				which allows up to 8 servo motors to be connected. MServo represents each servo. the main methods are setSpeed
				and setAngle. None of the motor interfaces are supported.</p>
				
				<p>The Lattebox range of products is supported by the NXTe, LSC and LServo classes.</p>
				
				<p>Firgelli L12-NXT-50 and L12-NXT-100 Linear Actuators are supported by the LnrActuator class.</p>

				<p><a href="#top">Back to top</a></p>
				
				<a name="7"></a>
				<h4>Motor multiplexers</h4>
				
				<p>The motor multiplexors supported by leJOS NXJ are:</p>

				<ul class="BlueArrows">
					<li>Mindsensors RCX multiplexer</li>
					<li>Mindsensors NXT multiplexer</li>
				</ul>
				
				<p>The RCX multiplexor is supported by the RCXMotorMultiplexor and RCXPlexdMotorPort classes.</p>				

				<p><a href="#top">Back to top</a></p>
												
				<a name="8"></a>
				<h4>Sensor Ports</h4>
				
				<p>If you are using a sensor connected
				directly to a NXT sensor port, you can use the SensorPort class
				and you can probably skip this section.</p><p> But if you are using a
				port splitter, or a remote NXT or RCX, it may be of interest. 
				</p>
				
				<p>The NXT sensor ports support three
				different types of sensor:</p>
				
				<ul class="BlueArrows">
					<li>NXT Analog/Digital Sensors</li>
					<li>I2C Sensors</li>
					<li>Legacy RCX sensors</li>
				</ul>
				
				<p>Corresponding to each of the
				different types of sensor, there is a corresponding interface:</p>
				
				<ul class="BlueArrows">
					<li>ADSensorPort which extends BasicSensorPort</li>
					<li>I2CPort extends BasicSensorPort</li>
					<li>LegacySensorPort extends ADSensorPort</li>
				</ul>
				
				<p>At the top of the interface
				hierarchy is the BasicSensorPort.  All sensor port classes
				implement this interface.  This interface allows the type and mode
				of a sensor to be set.  These type and mode constants are defined
				by the interface SensorConstants, which is inherited by the
				BasicSensorPort interface. 
				</p>
				
				<p>The types of sensors are:</p>
				<div class="CodeBox">
				<pre><code>       
TYPE_NO_SENSOR = 0
TYPE_SWITCH = 1
TYPE_TEMPERATURE = 2
TYPE_REFLECTION = 3
TYPE_ANGLE = 4
TYPE_LIGHT_ACTIVE = 5
TYPE_LIGHT_INACTIVE = 6
TYPE_SOUND_DB = 7 
TYPE_SOUND_DBA = 8
TYPE_CUSTOM = 9
TYPE_LOWSPEED = 10
TYPE_LOWSPEED_9V = 11
TYPE_HISPEED = 12
TYPE_COLORFULL = 13
TYPE_COLORRED = 14
TYPE_COLORGREEN = 15
TYPE_COLORBLUE = 16
TYPE_COLORNONE = 17
				</code></pre>
				</div>

				<p>and the modes are:</p>
				<div class="CodeBox">
				<pre><code>       
MODE_RAW = 0x00
MODE_BOOLEAN = 0x20
MODE_TRANSITIONCNT = 0x40
MODE_PERIODCOUNTER = 0x60
MODE_PCTFULLSCALE = 0x80
MODE_CELSIUS = 0xA0
MODE_FARENHEIT = 0xC0
MODE_ANGLESTEP = 0xE0
				</code></pre>
				</div>
				

				<p>The BasicSensorPort interface
				defines the methods:</p>
				
				<ul class="BlueArrows">
					<li><font color="#7f0055"><font face="courier new, monospace"><font size=2><b>public</b></font></font></font><font color="#000000"><font face="courier new, monospace"><font size=2>
					</font></font></font><font color="#7f0055"><font face="courier new, monospace"><font size=2><b>int</b></font></font></font><font color="#000000"><font face="courier new, monospace"><font size=2>
					getmode();</font></font></font></li>
					<li><font color="#7f0055"><font face="courier new, monospace"><font size=2><b>public</b></font></font></font><font color="#000000"><font face="courier new, monospace"><font size=2>
					</font></font></font><font color="#7f0055"><font face="courier new, monospace"><font size=2><b>int</b></font></font></font><font color="#000000"><font face="courier new, monospace"><font size=2>
					gettype();</font></font></font></li>
					<li><font color="#7f0055"><font face="courier new, monospace"><font size=2><span lang="fr-fr"><b>public</b></span></font></font></font><font color="#000000"><font face="courier new, monospace"><font size=2><span lang="fr-fr">
					</span></font></font></font><font color="#7f0055"><font face="courier new, monospace"><font size=2><span lang="fr-fr"><b>void</b></span></font></font></font><font color="#000000"><font face="courier new, monospace"><font size=2><span lang="fr-fr">
					setmode(</span></font></font></font><font color="#7f0055"><font face="courier new, monospace"><font size=2><span lang="fr-fr"><b>int</b></span></font></font></font><font color="#000000"><font face="courier new, monospace"><font size=2><span lang="fr-fr">
					mode);</span></font></font></font></li>
					<li><font color="#7f0055"><font face="courier new, monospace"><font size=2><b>public</b></font></font></font><font color="#000000"><font face="courier new, monospace"><font size=2>
					</font></font></font><font color="#7f0055"><font face="courier new, monospace"><font size=2><b>void</b></font></font></font><font color="#000000"><font face="courier new, monospace"><font size=2>
					settype(</font></font></font><font color="#7f0055"><font face="courier new, monospace"><font size=2><b>int</b></font></font></font><font color="#000000"><font face="courier new, monospace"><font size=2>
					type);</font></font></font></li>
					<li><font color="#7f0055"><font face="courier new, monospace"><font size=2><b>public</b></font></font></font><font color="#000000"><font face="courier new, monospace"><font size=2>
					</font></font></font><font color="#7f0055"><font face="courier new, monospace"><font size=2><b>void</b></font></font></font><font color="#000000"><font face="courier new, monospace"><font size=2>
					settypeandmode(</font></font></font><font color="#7f0055"><font face="courier new, monospace"><font size=2><b>int</b></font></font></font><font color="#000000"><font face="courier new, monospace"><font size=2>
					type, </font></font></font><font color="#7f0055"><font face="courier new, monospace"><font size=2><b>int</b></font></font></font><font color="#000000"><font face="courier new, monospace"><font size=2>
					mode);</font></font></font></li>
				</ul>
				
				<p>Most of the time, with leJOS NXJ,
				these types and modes do not need to be set explicitly as it is
				done by the constructor for the sensor class being used, e.g.
				TouchSensor, LightSensor and UltrasonicSensor.</p>
				
				<p>The implementation of the NXT
				sensor port &ndash; SensorPort &ndash; supports all these
				interfaces.  The reason for separating out the different
				interfaces is that there are other implementations of sensor ports
				that only support a subset of these interfaces, and different
				types of sensors only require particular interfaces to be
				implemented:</p>
				
				<ul class="BlueArrows">
					<li>I2C Sensors just require I2CPort</li>
					<li>NXT Analog/Digital sensors just require
					ADSensorPort</li>
					<li>RCX sensors such as the RCX Light sensor
					require LegacySensorPort</li>
				</ul>
				
				<p>Port splitters like the Mindsensors
				Split-Nx only support I2C sensors and thus, effectively, only
				support the I2CPort interface.</p>
				
				<p>There are other implementations
				that only support the other interfaces. For example the current
				implementation of remote sensor ports &ndash; RemoteSensorPort &ndash;
				currently only supports the ADSensorPort interface.</p>
			
				<p>The classes for RCX Sensors
				multiplexers &ndash; such as the forthcoming Mindsensors version &ndash;
				will only support the LegacySensorPort interface.</p>

				<p><a href="#top">Back to top</a></p>

				<a name="9"></a>
				<h4>Sensors</h4>
				
				<p>Each sensor supported by leJOS NXJ
				has a specific class that is used to access the sensor. Each of
				these sensor classes has, as a parameter, a sensor port that
				supports the required interface. Any sensor port class that
				implements the interface can be specified as the parameter.  As
				the SensorPort class supports all the interfaces, if the sensor
				being accessed is directly connected to the NXT, the parameter
				should be one of SensorPort.S1, SensorPort.S2, SensorPort.S3 or
				SensorPort.S4. 
				</p>
				
				<p>If a port splitter is used the
				parameter again should be one of SensorPort.S1, SensorPort.S2,
				SensorPort.S3 or SensorPort.S4. This specifies the port that the
				splitter is connected to. If multiple sensors are connected to the
				splitter they must each have different I2C addresses. Most I2C
				sensors can have their address changed &ndash; see the
				manufacturers instructions. To specify the address that a sensor
				uses, if it is not the default, then you may need to use an alternate constructor
                for the sensor class to allow you to specify the address. If such a constructor does not
                exist please report this to us and use the setAddress method of I2CSensor.</p>
				
				<p>The sensor ports supported by leJOS
				NXJ together with the class that supports them and the type of
				sensor port they require is given in the following table:</p>
				
			    <table border="1" cellpadding="5"  cellspacing="0" width="600">
            		<col width="250"/> <col width="200"/> <col width="150"/> 
            		<tbody>
              			<tr>
                			<td>
                				<p><b>Hardware Device</b></p>
                			</td>
               	 			<td>
                				<p><b>Class</b></p>
                			</td>
                			<td>
                				<p><b>SensorPort interface</b></p>
                			</td>
              			</tr>
              			<tr>
                			<td>
                				<p>LEGO NXT Touch Sensor</p>
                			</td>
                			<td>
                				<p>TouchSensor</p>
                			</td>
                			<td>
                				<p>ADSensorPort</p>
                			</td>
              			</tr>
               			<tr>
                			<td>
                				<p>LEGO NXT Light Sensor</p>
                			</td>
                			<td>
                				<p>LightSensor</p>
                			</td>
                			<td>
                				<p>ADSensorPort</p>
                			</td>
              			</tr>             		
               			<tr>
                			<td>
                				<p>LEGO NXT Sound Sensor</p>
                			</td>
                			<td>
                				<p>SoundSensor</p>
                			</td>
                			<td>
                				<p>ADSensorPort</p>
                			</td>
              			</tr>
                			<tr>
                			<td>
                				<p>LEGO NXT Color Sensor</p>
                			</td>
                			<td>
                				<p>ColorSensor</p>
                			</td>
                			<td>
                				<p>SensorPort</p>
                			</td>
              			</tr>
               			<tr>
                			<td>
                				<p>LEGO NXT Ultrasonic Sensor</p>
                			</td>
                			<td>
                				<p>UltrasonicSensor</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>
               			<tr>
                			<td>
                				<p>RCX Light Sensor</p>
                			</td>
                			<td>
                				<p>RCXLightSensor</p>
                			</td>
                			<td>
                				<p>LegacySensorPort</p>
                			</td>
              			</tr>              			
               			<tr>
                			<td>
                				<p>RCX Temperature Sensor</p>
                			</td>
                			<td>
                				<p>RCXTemperatureSensor</p>
                			</td>
                			<td>
                				<p>ADSensorPort</p>
                			</td>
              			</tr>              			
               			<tr>
                			<td>
                				<p>RCX Rotation Sensor</p>
                			</td>
                			<td>
                				<p>RCXRotationSensor</p>
                			</td>
                			<td>
                				<p>ADSensorPort</p>
                			</td>
              			</tr>              			
               			<tr>
                			<td>
                				<p>HiTechnic Compass Sensor</p>
                			</td>
                			<td>
                				<p>CompassSensor</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
               			<tr>
                			<td>
                				<p>HiTechnic Color Sensor</p>
                			</td>
                			<td>
                				<p>ColorSensorHT</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
               			<tr>
                			<td>
                				<p>HiTechnic Acceleration Sensor</p>
                			</td>
                			<td>
                				<p>AccelHTSensor</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
               			<tr>
                			<td>
                				<p>HiTechnic Gyro Sensor</p>
                			</td>
                			<td>
                				<p>GyroSensor</p>
                			</td>
                			<td>
                				<p>ADSensorPort</p>
                			</td>
              			</tr>              			
               			<tr>
                			<td>
                				<p>HiTechnic IR Seeker</p>
                			</td>
                			<td>
                				<p>IRSeeker</p>
                			</td>
                			<td>
                				<p>ADSensorPort</p>
                			</td>
              			</tr>              			
                			<tr>
                			<td>
                				<p>HiTechnic IRSeeker v2</p>
                			</td>
                			<td>
                				<p>IRSeekerV2</p>
                			</td>
                			<td>
                				<p>ADSensorPort</p>
                			</td>
              			</tr>              			
                		<tr>
                			<td>
                				<p>HiTechnic IRLink</p>
                			</td>
                			<td>
                				<p>IRLink</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                		<tr>
                			<td>
                				<p>HiTechnic EOPD Sensor</p>
                			</td>
                			<td>
                				<p>EOPD</p>
                			</td>
                			<td>
                				<p>ADSensorPort</p>
                			</td>
              			</tr> 
                 		<tr>
                			<td>
                				<p>HiTechnic Sensor Multiplexer</p>
                			</td>
                			<td>
                				<p>SensorMux</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>             			
              			<tr>
                			<td>
                				<p>Mindsensors Compass Sensor</p>
                			</td>
                			<td>
                				<p>CompassSensor</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                			<tr>
                			<td>
                				<p>Mindsensors Acceleration Sensor</p>
                			</td>
                			<td>
                				<p>AccelMindSensor</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                		<tr>
                			<td>
                				<p>Mindsensors NXTCam</p>
                			</td>
                			<td>
                				<p>NXTCam</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                			<tr>
                			<td>
                				<p>Mindsensors LineLeader</p>
                			</td>
                			<td>
                				<p>LineLeader</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                			<tr>
                			<td>
                				<p>Mindsenors NXTMMX</p>
                			</td>
                			<td>
                				<p>NXTMMX</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                		<tr>
                			<td>
                				<p>Mindsensors Dist-Nx</p>
                			</td>
                			<td>
                				<p>OpticalDistanceSensor</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                		<tr>
                			<td>
                				<p>RCX Touch Sensor</p>
                			</td>
                			<td>
                				<p>TouchSensor</p>
                			</td>
                			<td>
                				<p>ADSensorPort</p>
                			</td>
              			</tr>              			
                		<tr>
                			<td>
                				<p>Mindsenors NRLink-Nx</p>
                			</td>
                			<td>
                				<p>PFLink</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                		<tr>
                			<td>
                				<p>Mindsensors PFMate</p>
                			</td>
                			<td>
                				<p>PFMate</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                		<tr>
                			<td>
                				<p>Mindsensors PSP-Nx</p>
                			</td>
                			<td>
                				<p>PSPNXController</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                		<tr>
                			<td>
                				<p>Mindsensors NRLink</p>
                			</td>
                			<td>
                				<p>RCXLink</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                			<tr>
                			<td>
                				<p>Mindsensors RCX Multiplexer</p>
                			</td>
                			<td>
                				<p>RCXMotorMultiplexer</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                		<tr>
                			<td>
                				<p>Mindsensors RTC</p>
                			</td>
                			<td>
                				<p>RealTimeClock</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                		<tr>
                			<td>
                				<p>Mindsensors Touch Multiplexer</p>
                			</td>
                			<td>
                				<p>TouchMUX</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                		<tr>
                			<td>
                				<p>Mindsensors Servo Multiplexer</p>
                			</td>
                			<td>
                				<p>MSC</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                		<tr>
                			<td>
                				<p>Codatext RFID Sensor</p>
                			</td>
                			<td>
                				<p>RFIDSensor</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                			<tr>
                			<td>
                				<p>Dexter Industries DSwitch</p>
                			</td>
                			<td>
                				<p>DSwitch</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                			<tr>
                			<td>
                				<p>Linear Actuator</p>
                			</td>
                			<td>
                				<p>LnrActuator</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                			<tr>
                			<td>
                				<p>Lattebox LSC</p>
                			</td>
                			<td>
                				<p>LSC</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
                		<tr>
                			<td>
                				<p>Lattebox NXTe</p>
                			</td>
                			<td>
                				<p>NXTe</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			              			
                		<tr>
                			<td>
                				<p>Micro Infinity Cruizcore Gyro</p>
                			</td>
                			<td>
                				<p>CruizcoreGyro</p>
                			</td>
                			<td>
                				<p>I2CPort</p>
                			</td>
              			</tr>              			
             		</tbody>
              	</table>
			
				<p><a href="#top">Back to top</a></p>
				
				<a name="10"></a>
				<h4>RCX Sensors</h4>
			
				<p>RCX sensors, other than the touch
				sensor, are active sensors that have voltage applied for all but
				the short period every three milliseconds when the measurement is
				taken.</p>
				
				<a name="10.1"></a>
				<h5>RCX Light Sensor</h5>
				
				<p>The RCX light sensor is supported by the RCXLightSensor class.</p>
				
				<p>The constructor is:</p>
				
				<ul class="BlueArrows">
					<li>public RCXLightSensor(LegacySensorPort port)</li>
				</ul>
				
				<p>For example:</p>
				
				<div class="CodeBox">
				<pre><code>
RCXLightSensor light = new RCXLightSensor(SensorPort.S1);
				</code></pre>
				</div>
				
				<p>The RCX light sensor is automatically activated, so current is applied to it and the LED
				comes on. It can be passivated and activated explicitly.</p>
				<p>The methods are:</p>
				
				<ul class="BlueArrows">
					<li>public int readValue()</li>
					<li>public void activate()</li>
					<li>public void passivate()</li>
				</ul>
			
				<a name="10.2"></a>
				<h5>RCX Touch Sensor</h5>
			
				<p>As the RCX touch sensor is a
				passive sensor similar to the NXT version, it is supported by the
				standard TouchSensor class.</p>
				
				<a name="10.3"></a>
				<h5>RCX Rotation Sensor</h5>
				
				<p>The RCX rotation sensor is not currently supported by leJOS NXJ.</p>
				
				<a name=10.4"></a>
				<h5>RCX Temperature Sensor</h5>
				
				<p>The constructor is:</p>
				
				<ul class="BlueArrows">
					<li>public RCXTemperatureSensor(LegacySensorPort port)</li>
					<li>The methods are:</li>
					<li>int readValue() - returns raw value</li>
					<li>float getCelcius() - return the temperature in degrees Celcius</li>
					<li>float getFarenheit() - return the temperature in degrees Farenheit</li>
				</ul>

				<p><a href="#top">Back to top</a></p>
								
				<a name="11"></a>
				<h4>Third party sensors and other devices</h4>
			
				<p>leJOS NXJ supports many third party sensors. The two main vendors of third party sensors are
				Mindsensors and HiTechnic.</p>
			
				<p>Most of the third party sensors and I2C sensors and extend the I2CSensor class but there are also
				Analog/Digital sensors such as the HiTechnic Gyro sensor and the IR Seeker.</p>
			
				<p>There are also other I2C devices	supplied by the third parties, that are not sensors, but are
				multiplexers or adapters.</p>
			
				<p>The RCX Motor Multiplexer from Mindsensors is an example of a multiplexer. It allows up to 4 RCX
				motors to be  connected to a NXT sensor port and to be independently controlled.</p>
			
				<p>The Mindstorms NRLink-Nx  infra-red communications adapter is an example of an adapter.  It allows
				two-way communication between the NXT and RCXs. It also allows control of Power Function motors. 
				</p>

				<p><a href="#top">Back to top</a></p>
							
				<a name="12"></a>
				<h4>I2CSensor</h4>
			
				<p>The I2CSensor class implements the basic methods for accessing I2C sensors including getData and	SendData.</p>
			
				<p>It also includes methods that are implemented by all the I2C sensors, including getVersion,
				getProductID and getSensorType.</p>
			
				<p>The method signatures are:</p>
			
				<ul class="BlueArrows">
					<li>public int getData(int register, byte []	buf, int len)</li>
					<li>public int sendData(int register, byte [] buf, int len)</li>
					<li>public int sendData(int register, byte value)</li>
					<li>public String getVersion()</li>
					<li>public String getProductID()</li>
					<li>public String getSensorType()</li>
				</ul>
			
				<p>Individual I2C devices have
				registers that can be read and written and registers that can be
				used to execute commands. Each I2C device has a class that extends
				I2CSensor and has methods to access the registers and execute the
				commands specific to that sensor.</p>
			
				<p>The I2CSensor class can be used to
				implement an I2C device explorer that reports what devices are
				connected to which sensor using which address &ndash; see the
				I2CDevices sample. This is possible as all the NXT I2C sensors and
				other devices support the getVersion, getProductID and
				getSensorType methods.</p>
				
				<p>See the table above for the complete list of  sensors and other third party devices. </p>

				<p><a href="#top">Back to top</a></p>
				<a name="13"></a>
				<h4>I2CPort</h4>
			
				<p>The I2CPort provides low level access to a port being used for I2C communications. In many cases
                    these operations are not required and the higher level I2CSensor class is used. However
                    some advanced applications (like those scanning ports to identify sensors) may require access
                    at this level.</p>
			
				<p>The method signatures are:</p>
			
				<ul class="BlueArrows">
					<li>public void i2cEnable(int mode)</li>
					<li>public void i2cDisable()</li>
					<li>public int i2cStatus()</li>
					<li>public int i2cTransaction(int deviceAddress, byte[]writeBuf,
            int writeOffset, int writeLen, byte[] readBuf, int readOffset,
            int readLen)</li>
				</ul>

                <p>To use a port with I2C it must be enabled. When I2C operation is no longer required it should
                    be disabled. The enable method also sets the operating
                   mode of the port. The available operating modes are:</p>
				<div class="CodeBox">
				<pre><code>
STANDARD_MODE = 0
LEGO_MODE = 1
ALWAYS_ACTIVE = 2
NO_RELEASE = 4
HIGH_SPEED = 8
				</code></pre>
				</div>
                <p>The mode normally used is <b>LEGO_MODE</b>. This offers compatibility with the standard
                   Lego firmware. The bus will operate at 9.6Kbps and will add delays to be
                   compatible with the Lego Ultrasonic sensor. This mode will normally work with all NXT compatible devices.
                   <b>STANDARD_MODE</b> operates the port in a more I2C standard compliant way. You may wish to try using
                   this if you are having problems with a device. <b>HIGH_SPEED</b> mode operates the bus at a much
                   higher speed (125Kbps), to function at this speed the device will typically need to be using a 
                   hardware implementation of I2C (many of the HiTechnics and Mindsensors devices can be used at this
                   speed). It should be noted that these modes operate at the port level not for an individual sensor
                   so if more than one sensor is attached to the same port they will all share the same operating mode.
                   To set the operating mode of a port a call to enable(mode) should be made prior to creating any
                   instances of sensors to be associated with the port.</p>

				<p><a href="#top">Back to top</a></p>

        		<div class="NavBit">
                    <a target="_top" href="../Utilities/LejosUtilities.htm">&laquo;&nbsp;Previous</a>&nbsp;&#8226;&nbsp;<a href="../index.htm">TOC</a>&nbsp;&#8226;&nbsp;<a href="../AdvancedTopics/UnderstandingFilesLCPMemTools.htm">Next&nbsp;&raquo;</a>
        		</div>
			</td>
		</tr>
	</table>
</body>
</html>