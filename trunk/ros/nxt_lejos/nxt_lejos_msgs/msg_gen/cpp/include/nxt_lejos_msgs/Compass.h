/* Auto-generated by genmsg_cpp for file /home/lejosdev/ros/workspace/nxt_lejos/nxt_lejos_msgs/msg/Compass.msg */
#ifndef NXT_LEJOS_MSGS_MESSAGE_COMPASS_H
#define NXT_LEJOS_MSGS_MESSAGE_COMPASS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace nxt_lejos_msgs
{
template <class ContainerAllocator>
struct Compass_ {
  typedef Compass_<ContainerAllocator> Type;

  Compass_()
  : heading(0.0)
  {
  }

  Compass_(const ContainerAllocator& _alloc)
  : heading(0.0)
  {
  }

  typedef float _heading_type;
  float heading;


private:
  static const char* __s_getDataType_() { return "nxt_lejos_msgs/Compass"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "22eeef76ab4645786a2d92bcfbc4c574"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 heading\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, heading);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, heading);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(heading);
    return size;
  }

  typedef boost::shared_ptr< ::nxt_lejos_msgs::Compass_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nxt_lejos_msgs::Compass_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Compass
typedef  ::nxt_lejos_msgs::Compass_<std::allocator<void> > Compass;

typedef boost::shared_ptr< ::nxt_lejos_msgs::Compass> CompassPtr;
typedef boost::shared_ptr< ::nxt_lejos_msgs::Compass const> CompassConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::nxt_lejos_msgs::Compass_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::nxt_lejos_msgs::Compass_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace nxt_lejos_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nxt_lejos_msgs::Compass_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nxt_lejos_msgs::Compass_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nxt_lejos_msgs::Compass_<ContainerAllocator> > {
  static const char* value() 
  {
    return "22eeef76ab4645786a2d92bcfbc4c574";
  }

  static const char* value(const  ::nxt_lejos_msgs::Compass_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x22eeef76ab464578ULL;
  static const uint64_t static_value2 = 0x6a2d92bcfbc4c574ULL;
};

template<class ContainerAllocator>
struct DataType< ::nxt_lejos_msgs::Compass_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nxt_lejos_msgs/Compass";
  }

  static const char* value(const  ::nxt_lejos_msgs::Compass_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nxt_lejos_msgs::Compass_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 heading\n\
\n\
";
  }

  static const char* value(const  ::nxt_lejos_msgs::Compass_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::nxt_lejos_msgs::Compass_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nxt_lejos_msgs::Compass_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.heading);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Compass_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nxt_lejos_msgs::Compass_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::nxt_lejos_msgs::Compass_<ContainerAllocator> & v) 
  {
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
  }
};


} // namespace message_operations
} // namespace ros

#endif // NXT_LEJOS_MSGS_MESSAGE_COMPASS_H

