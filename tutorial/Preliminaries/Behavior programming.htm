<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head>


<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="ProgId" content="Word.Document">
<meta name="Generator" content="Microsoft Word 10">
<meta name="Originator" content="Microsoft Word 10">
<link rel="File-List" href="file:///C:/Documents%20and%20Settings/Owner/My%20Documents/ieor140/NXT/NXJTutoral/Behaviors/Behavior%20programming_files/filelist.xml">
<link rel="Edit-Time-Data" href="file:///C:/Documents%20and%20Settings/Owner/My%20Documents/ieor140/NXT/NXJTutoral/Behaviors/Behavior%20programming_files/editdata.mso"><!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]--><title>Behavior programming</title><!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Roger</o:Author>
  <o:Template>NXJTutorialTemplate.dot</o:Template>
  <o:LastAuthor>Roger</o:LastAuthor>
  <o:Revision>8</o:Revision>
  <o:TotalTime>36</o:TotalTime>
  <o:Created>2008-06-29T22:37:00Z</o:Created>
  <o:LastSaved>2008-06-29T23:14:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>2687</o:Words>
  <o:Characters>15320</o:Characters>
  <o:Company>UC Bereley</o:Company>
  <o:Lines>127</o:Lines>
  <o:Paragraphs>35</o:Paragraphs>
  <o:CharactersWithSpaces>17972</o:CharactersWithSpaces>
  <o:Version>10.4219</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:AttachedTemplate
   HRef="C:\Documents and Settings\Owner\Application Data\Microsoft\Templates\NXJTutorialTemplate.dot"></w:AttachedTemplate>
  <w:UpdateStylesOnOpen/>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]-->



<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-link:"Heading 1 Char";
	mso-style-next:"Body Text";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:16.0pt;
	font-family:Arial;
	color:#FF6600;
	mso-font-kerning:16.0pt;
	font-weight:bold;}
h2
	{mso-style-parent:"Heading 1";
	mso-style-link:"Heading 2 Char";
	mso-style-next:"Body Text 2";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:14.0pt;
	font-family:Arial;
	color:#FF6600;
	mso-ansi-language:EN-GB;
	mso-fareast-language:EN-GB;
	font-weight:bold;
	font-style:italic;}
h3
	{mso-style-parent:"Heading 2";
	mso-style-link:"Heading 3 Char";
	mso-style-next:"Body Text 3";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.2in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:13.0pt;
	font-family:Arial;
	color:#FF6600;
	mso-ansi-language:EN-GB;
	mso-fareast-language:EN-GB;
	font-weight:bold;}
h4
	{mso-style-parent:"Heading 3";
	mso-style-next:"Body Text 4";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:.3in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:Arial;
	color:black;
	mso-ansi-language:EN-GB;
	mso-fareast-language:EN-GB;
	font-weight:bold;
	mso-bidi-font-weight:normal;
	mso-bidi-font-style:italic;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{mso-style-link:"Body Text Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{mso-style-parent:"Body Text";
	mso-style-link:"Body Text 2 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.1in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoBodyText3, li.MsoBodyText3, div.MsoBodyText3
	{mso-style-parent:"Body Text 2";
	mso-style-link:"Body Text 3 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.2in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:8.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p
	{mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Heading1color, li.Heading1color, div.Heading1color
	{mso-style-name:"Heading1 color";
	mso-style-parent:"Heading 1";
	mso-style-next:"Body Text";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:16.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	color:#FF6600;
	mso-font-kerning:16.0pt;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	mso-ansi-font-size:13.0pt;
	mso-bidi-font-size:13.0pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	mso-ansi-language:EN-GB;
	mso-fareast-language:EN-GB;
	mso-bidi-language:AR-SA;
	font-weight:bold;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	mso-ansi-font-size:16.0pt;
	mso-bidi-font-size:16.0pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	color:#FF6600;
	mso-font-kerning:16.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:EN-US;
	mso-bidi-language:AR-SA;
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	mso-ansi-font-size:14.0pt;
	mso-bidi-font-size:14.0pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	mso-ansi-language:EN-GB;
	mso-fareast-language:EN-GB;
	mso-bidi-language:AR-SA;
	font-weight:bold;
	font-style:italic;}
p.Heading2Color, li.Heading2Color, div.Heading2Color
	{mso-style-name:"Heading2 Color";
	mso-style-parent:"Heading 2";
	mso-style-next:"Body Text 2";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:14.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	color:#FF6600;
	mso-ansi-language:EN-GB;
	mso-fareast-language:EN-GB;
	font-weight:bold;
	font-style:italic;}
p.BodyText4, li.BodyText4, div.BodyText4
	{mso-style-name:"Body Text 4";
	mso-style-parent:"Body Text 3";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.3in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:8.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Heading3color, li.Heading3color, div.Heading3color
	{mso-style-name:"Heading3 color";
	mso-style-update:auto;
	mso-style-parent:"Heading 3";
	mso-style-next:"Body Text 3";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.2in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:13.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	color:#FF6600;
	mso-ansi-language:EN-GB;
	mso-fareast-language:EN-GB;
	font-weight:bold;}
span.BodyTextChar
	{mso-style-name:"Body Text Char";
	mso-style-link:"Body Text";
	mso-ansi-font-size:12.0pt;
	mso-bidi-font-size:12.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:EN-US;
	mso-bidi-language:AR-SA;}
span.BodyText2Char
	{mso-style-name:"Body Text 2 Char";
	mso-style-parent:"Body Text Char";
	mso-style-link:"Body Text 2";
	mso-ansi-font-size:12.0pt;
	mso-bidi-font-size:12.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:EN-US;
	mso-bidi-language:AR-SA;}
span.BodyText3Char
	{mso-style-name:"Body Text 3 Char";
	mso-style-parent:"Body Text 2 Char";
	mso-style-link:"Body Text 3";
	mso-ansi-font-size:12.0pt;
	mso-bidi-font-size:8.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:EN-US;
	mso-bidi-language:AR-SA;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:-132;
	mso-list-type:simple;
	mso-list-template-ids:-1655899830;}
@list l0:level1
	{mso-level-tab-stop:1.25in;
	mso-level-number-position:left;
	margin-left:1.25in;
	text-indent:-.25in;}
@list l1
	{mso-list-id:-131;
	mso-list-type:simple;
	mso-list-template-ids:-685490596;}
@list l1:level1
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	margin-left:1.0in;
	text-indent:-.25in;}
@list l2
	{mso-list-id:-130;
	mso-list-type:simple;
	mso-list-template-ids:948443036;}
@list l2:level1
	{mso-level-tab-stop:.75in;
	mso-level-number-position:left;
	margin-left:.75in;
	text-indent:-.25in;}
@list l3
	{mso-list-id:-129;
	mso-list-type:simple;
	mso-list-template-ids:-871742908;}
@list l3:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4
	{mso-list-id:-128;
	mso-list-type:simple;
	mso-list-template-ids:-1254185752;}
@list l4:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:1.25in;
	mso-level-number-position:left;
	margin-left:1.25in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l5
	{mso-list-id:-127;
	mso-list-type:simple;
	mso-list-template-ids:-1802441078;}
@list l5:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	margin-left:1.0in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l6
	{mso-list-id:-126;
	mso-list-type:simple;
	mso-list-template-ids:-48739110;}
@list l6:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.75in;
	mso-level-number-position:left;
	margin-left:.75in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l7
	{mso-list-id:-125;
	mso-list-type:simple;
	mso-list-template-ids:-1490543376;}
@list l7:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l8
	{mso-list-id:-120;
	mso-list-type:simple;
	mso-list-template-ids:-927711426;}
@list l8:level1
	{mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
@list l9
	{mso-list-id:-119;
	mso-list-type:simple;
	mso-list-template-ids:1431183632;}
@list l9:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l10
	{mso-list-id:443042117;
	mso-list-template-ids:733755854;}
@list l10:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:0in;
	font-family:Symbol;}
@list l10:level2
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Courier New";}
@list l10:level3
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l10:level4
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l10:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Courier New";}
@list l10:level6
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l10:level7
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l10:level8
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Courier New";}
@list l10:level9
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l11
	{mso-list-id:452284962;
	mso-list-type:hybrid;
	mso-list-template-ids:-1419324642 134807553 134807555 134807557 134807553 134807555 134807557 134807553 134807555 134807557;}
@list l11:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l12
	{mso-list-id:953512223;
	mso-list-type:hybrid;
	mso-list-template-ids:314469080 -1369821974 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l12:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l13
	{mso-list-id:1196848569;
	mso-list-type:hybrid;
	mso-list-template-ids:733755854 1655733534 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l13:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:0in;
	font-family:Symbol;}
@list l14
	{mso-list-id:1921985629;
	mso-list-template-ids:67698717;}
@list l14:level1
	{mso-level-text:"%1\)";
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
@list l14:level2
	{mso-level-number-format:alpha-lower;
	mso-level-text:"%2\)";
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	margin-left:.5in;
	text-indent:-.25in;}
@list l14:level3
	{mso-level-number-format:roman-lower;
	mso-level-text:"%3\)";
	mso-level-tab-stop:.75in;
	mso-level-number-position:left;
	margin-left:.75in;
	text-indent:-.25in;}
@list l14:level4
	{mso-level-text:"\(%4\)";
	mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	margin-left:1.0in;
	text-indent:-.25in;}
@list l14:level5
	{mso-level-number-format:alpha-lower;
	mso-level-text:"\(%5\)";
	mso-level-tab-stop:1.25in;
	mso-level-number-position:left;
	margin-left:1.25in;
	text-indent:-.25in;}
@list l14:level6
	{mso-level-number-format:roman-lower;
	mso-level-text:"\(%6\)";
	mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	margin-left:1.5in;
	text-indent:-.25in;}
@list l14:level7
	{mso-level-tab-stop:1.75in;
	mso-level-number-position:left;
	margin-left:1.75in;
	text-indent:-.25in;}
@list l14:level8
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	margin-left:2.0in;
	text-indent:-.25in;}
@list l14:level9
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:2.25in;
	mso-level-number-position:left;
	margin-left:2.25in;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style><!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
table.MsoTableGrid
	{mso-style-name:"Table Grid";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin-top:0in;
	mso-para-margin-right:0in;
	mso-para-margin-bottom:6.0pt;
	mso-para-margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
table.MsoTableGridFirstRow
	{mso-style-name:"Table Grid";
	mso-table-condition:first-row;
	mso-ansi-font-weight:bold;
	mso-ansi-font-style:normal;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--></head><body style="" lang="EN-US">

<div class="Section1">

<h1>Behavior programming<o:p></o:p></h1>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<h2><span lang="EN-GB">Programming Behavior with leJOS NXJ</span></h2>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoBodyText2">When most people start programming a robot, they think of
the program flow as a series of if-thens, which is remeniscent of structured
programming (Figure 1). This type of programming is very easy to get started in
and hardly requires any thought or design beforehand. A programmer can just sit
at the computer and start typing. The problem is, the code ends up as spaghetti
code; all tangled up and difficult to expand. The behavior control model, in
contrast, requires a little more planning before coding begins, but the payoff
is that each behavior is nicely encapsulated within an easy to understand
structure. This will theoretically make your code easier to understand by other
programmers familiar with the behavior control model, but more importantly it
becomes very easy to add or remove specific behaviors from the overall
structure, without negative repercussions to the rest of the code. Let's
examine how to do this in leJOS NXJ.</p>

<p class="MsoNormal"><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600"
 o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f"
 stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_s1040" type="#_x0000_t75" alt="" style='position:absolute;
 margin-left:58.5pt;margin-top:9.05pt;width:306pt;height:171.75pt;z-index:15'>
 <v:imagedata src="Behavior%20programming_files/image001.jpg" o:href="http://lejos.sourceforge.net/tutorial/behavior/fig1.jpg"/>
</v:shape><![endif]--><!--[if !vml]--><span style="">

<table align="left" cellpadding="0" cellspacing="0">
 <tbody><tr>
  <td height="12" width="78"></td>
 </tr>
 <tr>
  <td></td>
  <td><img src="Behavior%20programming_files/image014.jpg" v:shapes="_x0000_s1040" height="229" width="408"></td>
 </tr>
</tbody></table>

</span><!--[endif]--><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<br style="" clear="all">

<p class="MsoNormal"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Figure 1:
Structured programming visualized.</p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<h2><span lang="EN-GB">The Behavior API</span></h2>

<p class="MsoBodyText2">The Behavior API is very simple, and is composed of only
one interface and one class. The Behavior interface is used to define
behaviors. The Behavior interface is very general, so it works quite well
because the individual implementations of a behavior vary widely. Once all the
Behaviors are defined, they are given to an Arbitrator to regulate which
behaviors should be activated. All classes and interfaces for Behavior control
are located the lejos.subsumption package. The API for the Behavior interface
is as follows.</p>

<h3><span lang="EN-GB">lejos.subsumption.Behavior</span></h3>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<ul style="margin-top: 0in;" type="disc">
 <li class="MsoNormal" style="">boolean
     takeControl() </li>
</ul>

<p class="MsoBodyText2">Returns a boolean value to indicate if this behavior
should become active. For example, if a touch sensor indicates the robot has
bumped into an object, this method should return true.</p>

<ul style="margin-top: 0in;" type="disc">
 <li class="MsoNormal" style="">void
     action() </li>
</ul>

<p class="MsoBodyText2">The code in this method initiates an action when the
behavior becomes active. For example, if takeControl() detects the robot has
collided with an object, the action() code could make the robot back up and
turn away from the object.</p>

<ul style="margin-top: 0in;" type="disc">
 <li class="MsoNormal" style="">void
     suppress() </li>
</ul>

<p class="MsoBodyText2">The code in the suppress() method should immediately
terminate the code running in the action() method. The suppress() method can
also be used to update any data before this behavior completes.</p>

<p class="MsoBodyText2">As you can see, the three methods in the Behavior
interface are quite simple. If a robot has three discreet behaviors, then the
programmer will need to create three classes, with each class implementing the
Behavior interface. Once these classes are complete, the code should hand the
Behavior objects off to the Arbitrator to deal with.</p>

<h3><span lang="EN-GB">lejos.subsumption.Arbitrator</span></h3>

<p class="MsoBodyText3"><span style="" lang="EN-GB">The
constructor is:<o:p></o:p></span></p>

<ul style="margin-top: 0in;" type="disc">
 <li class="MsoNormal" style="">public
     Arbitrator(Behavior [] behaviors) <br>
     C<span class="BodyText3Char">reates an Arbitrator object that regulates when
     each of the behaviors will become active. The higher the index array
     number for a Beha</span>vior, the higher the priority level.<br>
     Parameter: an array of Behaviors</li>
</ul>

<p class="MsoBodyText3">Public Methods </p>

<ul style="margin-top: 0in;" type="disc">
 <li class="MsoNormal" style="">public
     void start() <br>
     Starts the arbitration system.</li>
</ul>

<p class="MsoBodyText3">The Arbitrator class is even easier to understand than
Behavior. When an Arbitrator object is instantiated, it is given an array of
Behavior objects. Once it has these, the start() method is called and it begins
arbitrating; deciding which behaviors should become active. The Arbitrator
calls the takeControl() method on each Behavior object, starting with the
object with the highest index number in the array. It works its way through
each of the behavior objects until it encounters a behavior that wants to take
control. When it encounters one, it executes the action() method of that
behavior once and only once. If two behaviors both want to take control, then
only the higher level behavior will be allowed (Figure 2).</p>

<p class="MsoNormal"><!--[if gte vml 1]><v:shape id="_x0000_s1039" type="#_x0000_t75"
 alt="" style='position:absolute;margin-left:96.6pt;margin-top:18.75pt;width:279.75pt;
 height:136.5pt;z-index:14'>
 <v:imagedata src="Behavior%20programming_files/image003.jpg" o:href="http://lejos.sourceforge.net/tutorial/behavior/fig2.jpg"/>
</v:shape><![endif]--><!--[if !vml]--><span style="">

<table align="left" cellpadding="0" cellspacing="0">
 <tbody><tr>
  <td height="25" width="129"></td>
 </tr>
 <tr>
  <td></td>
  <td><img src="Behavior%20programming_files/image003.jpg" v:shapes="_x0000_s1039" height="182" width="373"></td>
 </tr>
</tbody></table>

</span><!--[endif]--><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<br style="" clear="all">

<p class="MsoNormal"><span style="">&nbsp;&nbsp;&nbsp; </span><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Figure 2: Higher level behaviors
suppress lower level behaviors.</p>

<p class="MsoNormal" style="text-align: center;" align="center"><o:p>&nbsp;</o:p></p>

<p class="MsoBodyText3">Now that we are familiar with the Behavior API under
leJOS, let's look at a simple example using three behaviors. For this example,
we will program some behavior for a simple robot with differential steering.
This robot will drive forward as it's primary low-level behavior. When it hits
an object, a high priority behavior will become active to back the robot up and
turn it 90 degrees. There will also be a third behavior which we will insert
into the program after the first two have been completed. Let's start with the
first behavior.</p>

<p class="MsoBodyText3">As we saw in the Behavior interface, we must implement
the methods action(), suppress(), and takeControl(). The behavior for driving
forward will take place in the action() method. It simply needs to make motors
A and C rotate forward:</p>

<p class="MsoNormal"><!--[if gte vml 1]><v:shapetype id="_x0000_t202"
 coordsize="21600,21600" o:spt="202" path="m,l,21600r21600,l21600,xe">
 <v:stroke joinstyle="miter"/>
 <v:path gradientshapeok="t" o:connecttype="rect"/>
</v:shapetype><v:shape id="_x0000_s1026" type="#_x0000_t202" style='position:absolute;
 margin-left:55.5pt;margin-top:9.8pt;width:171pt;height:58.95pt;z-index:1'>
 <v:textbox style='mso-fit-shape-to-text:t'/>
</v:shape><![endif]--><!--[if !vml]--><span style="">

<table align="left" cellpadding="0" cellspacing="0">
 <tbody><tr>
  <td height="12" width="73"></td>
 </tr>
 <tr>
  <td></td>
  <td style="border: 0.75pt solid black; background: white none repeat scroll 0%; vertical-align: top; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" bgcolor="white" height="85" width="234"><!--[endif]--><!--[if !mso]--><span style="position: absolute; z-index: 1;">
  <table cellpadding="0" cellspacing="0" width="100%">
   <tbody><tr>
    <td><!--[endif]-->
    <div v:shape="_x0000_s1026" style="padding: 3.6pt 7.2pt;" class="shape">
    <p class="MsoNormal"><span style="font-size: 9pt; font-family: &quot;Courier New&quot;;">public
    void action() {<br>
    &nbsp;&nbsp;&nbsp;Motor.A.forward();<br>
    &nbsp;&nbsp;&nbsp;Motor.C.forward();<br>
    }<o:p></o:p></span></p>
    </div>
    <!--[if !mso]--></td>
   </tr>
  </tbody></table>
  </span><!--[endif]--><!--[if !mso & !vml]-->&nbsp;<!--[endif]--><!--[if !vml]--></td>
 </tr>
</tbody></table>

</span><!--[endif]--><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<br style="" clear="all">

<p class="MsoBodyText3">That was easy enough! Now the suppress() method will need
to stop this action when it is called, as follows:</p>

<p class="MsoNormal"><!--[if gte vml 1]><v:shape id="_x0000_s1029" type="#_x0000_t202"
 style='position:absolute;margin-left:52.5pt;margin-top:17.25pt;width:272.65pt;
 height:57pt;z-index:4;mso-position-vertical-relative:line'/><![endif]--><!--[if !vml]--><span style="">

<table align="left" cellpadding="0" cellspacing="0">
 <tbody><tr>
  <td height="22" width="69"></td>
 </tr>
 <tr>
  <td></td>
  <td style="border: 0.75pt solid black; background: white none repeat scroll 0%; vertical-align: top; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" bgcolor="white" height="82" width="370"><!--[endif]--><!--[if !mso]--><span style="position: absolute; z-index: 4;">
  <table cellpadding="0" cellspacing="0" width="100%">
   <tbody><tr>
    <td><!--[endif]-->
    <div v:shape="_x0000_s1029" style="padding: 3.6pt 7.2pt;" class="shape">
    <p class="MsoNormal"><span style="font-size: 9pt; font-family: &quot;Courier New&quot;;">public
    void suppress() {<br>
    &nbsp;&nbsp;&nbsp;Motor.A.stop();<br>
    &nbsp;&nbsp;&nbsp;Motor.C.stop();<br>
    }<o:p></o:p></span></p>
    </div>
    <!--[if !mso]--></td>
   </tr>
  </tbody></table>
  </span><!--[endif]--><!--[if !mso & !vml]-->&nbsp;<!--[endif]--><!--[if !vml]--></td>
 </tr>
</tbody></table>

</span><!--[endif]--><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<br style="" clear="all">

<p class="MsoBodyText3">So far, so good. Now we need to implement a method to
tell Arbitrator when this Behavior should become active. As we outlined
earlier, this robot will drive forward always, unless something else suppresses
it, so this Behavior should always want to take control (it's a bit of a
control freak). The takeControl() method should return true, no matter what is
happening. This may seem counter intuitive, but rest assured that higher level
behaviors will be able to cut in on this behavior when the need arises. The
method appears as follows:</p>

<p class="MsoNormal"><!--[if gte vml 1]><v:shape id="_x0000_s1030" type="#_x0000_t202"
 style='position:absolute;margin-left:25.5pt;margin-top:.8pt;width:257.65pt;
 height:47.7pt;z-index:5;mso-position-vertical-relative:line'>
 <v:textbox style='mso-fit-shape-to-text:t'/>
</v:shape><![endif]--><!--[if !vml]--><span style="">

<table align="left" cellpadding="0" cellspacing="0">
 <tbody><tr>
  <td height="0" width="33"></td>
 </tr>
 <tr>
  <td></td>
  <td style="border: 0.75pt solid black; background: white none repeat scroll 0%; vertical-align: top; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" bgcolor="white" height="70" width="350"><!--[endif]--><!--[if !mso]--><span style="position: absolute; z-index: 5;">
  <table cellpadding="0" cellspacing="0" width="100%">
   <tbody><tr>
    <td><!--[endif]-->
    <div v:shape="_x0000_s1030" style="padding: 3.6pt 7.2pt;" class="shape">
    <p class="MsoNormal"><span style="font-size: 9pt; font-family: &quot;Courier New&quot;;">public
    boolean takeControl() {<br>
    &nbsp;&nbsp;&nbsp;return true;<br>
    }<o:p></o:p></span></p>
    </div>
    <!--[if !mso]--></td>
   </tr>
  </tbody></table>
  </span><!--[endif]--><!--[if !mso & !vml]-->&nbsp;<!--[endif]--><!--[if !vml]--></td>
 </tr>
</tbody></table>

</span><!--[endif]--><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<br style="" clear="all">

<p class="MsoNormal" style=""><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></p>

<p class="MsoBodyText3">That's all it takes to define our first Behavior to drive
the robot forward. The complete code listing for this class is as follows:</p>

<p class="MsoNormal"><!--[if gte vml 1]><v:shape id="_x0000_s1031" type="#_x0000_t202"
 style='position:absolute;margin-left:34.1pt;margin-top:12.75pt;width:343.9pt;
 height:227.7pt;z-index:6;mso-position-vertical-relative:line'>
 <v:textbox style='mso-fit-shape-to-text:t'/>
</v:shape><![endif]--><!--[if !vml]--><span style="">

<table align="left" cellpadding="0" cellspacing="0">
 <tbody><tr>
  <td height="16" width="44"></td>
 </tr>
 <tr>
  <td></td>
  <td style="border: 0.75pt solid black; background: white none repeat scroll 0%; vertical-align: top; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" bgcolor="white" height="310" width="465"><!--[endif]--><!--[if !mso]--><span style="position: absolute; z-index: 6;">
  <table cellpadding="0" cellspacing="0" width="100%">
   <tbody><tr>
    <td><!--[endif]-->
    <div v:shape="_x0000_s1031" style="padding: 3.6pt 7.2pt;" class="shape">
    <p class="MsoNormal"><span style="font-size: 9pt; font-family: &quot;Courier New&quot;;">import
    lejos.subsumption.*;<br>
    import lejos.nxt.*;<br>
    <br>
    public class DriveForward implements Behavior {<br>
    <br>
    &nbsp;&nbsp;&nbsp;public boolean takeControl() {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>
    &nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;public void suppress() {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.A.stop();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.C.stop();<br>
    &nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;public void action() {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.A.forward();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.C.forward();<br>
    &nbsp;&nbsp;&nbsp;}<br>
    }<o:p></o:p></span></p>
    </div>
    <!--[if !mso]--></td>
   </tr>
  </tbody></table>
  </span><!--[endif]--><!--[if !mso & !vml]-->&nbsp;<!--[endif]--><!--[if !vml]--></td>
 </tr>
</tbody></table>

</span><!--[endif]--><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<br style="" clear="all">

<p class="MsoBodyText3">The second behavior is a little more complicated than the
first, but still very similar. The main action of this behavior is to reverse
and turn when the robot strikes an object. In this example, we would like the
behavior to take control only when the touch sensor strikes an object, so the takeControl()
method will be defined as follows:</p>

<p class="MsoNormal"><!--[if gte vml 1]><v:shape id="_x0000_s1033" type="#_x0000_t202"
 style='position:absolute;margin-left:36pt;margin-top:6pt;width:269.65pt;
 height:47.7pt;z-index:8;mso-position-vertical-relative:line'>
 <v:textbox style='mso-fit-shape-to-text:t'/>
</v:shape><![endif]--><!--[if !vml]--><span style="">

<table align="left" cellpadding="0" cellspacing="0">
 <tbody><tr>
  <td height="7" width="47"></td>
 </tr>
 <tr>
  <td></td>
  <td style="border: 0.75pt solid black; background: white none repeat scroll 0%; vertical-align: top; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" bgcolor="white" height="70" width="366"><!--[endif]--><!--[if !mso]--><span style="position: absolute; z-index: 8;">
  <table cellpadding="0" cellspacing="0" width="100%">
   <tbody><tr>
    <td><!--[endif]-->
    <div v:shape="_x0000_s1033" style="padding: 3.6pt 7.2pt;" class="shape">
    <p class="MsoNormal"><span style="font-size: 9pt; font-family: &quot;Courier New&quot;;">public
    boolean takeControl() {<br>
    &nbsp;&nbsp;&nbsp;return Sensor.S2.readBooleanValue();<br>
    }<o:p></o:p></span></p>
    </div>
    <!--[if !mso]--></td>
   </tr>
  </tbody></table>
  </span><!--[endif]--><!--[if !mso & !vml]-->&nbsp;<!--[endif]--><!--[if !vml]--></td>
 </tr>
</tbody></table>

</span><!--[endif]--><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<br style="" clear="all">

<p class="MsoNormal">For the action, we want the robot to back up and rotate when
it strikes an object, so we will define the action() method as follows:</p>

<p class="MsoNormal"><!--[if gte vml 1]><v:shape id="_x0000_s1034" type="#_x0000_t202"
 style='position:absolute;margin-left:28.85pt;margin-top:6.75pt;width:308.65pt;
 height:126.45pt;z-index:9;mso-position-vertical-relative:line'>
 <v:textbox style='mso-fit-shape-to-text:t'/>
</v:shape><![endif]--><!--[if !vml]--><span style="">

<table align="left" cellpadding="0" cellspacing="0">
 <tbody><tr>
  <td height="8" width="37"></td>
 </tr>
 <tr>
  <td></td>
  <td style="border: 0.75pt solid black; background: white none repeat scroll 0%; vertical-align: top; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" bgcolor="white" height="175" width="418"><!--[endif]--><!--[if !mso]--><span style="position: absolute; z-index: 9;">
  <table cellpadding="0" cellspacing="0" width="100%">
   <tbody><tr>
    <td><!--[endif]-->
    <div v:shape="_x0000_s1034" style="padding: 3.6pt 7.2pt;" class="shape">
    <p class="MsoNormal"><span style="font-size: 9pt; font-family: &quot;Courier New&quot;;">public
    void action() {<br>
    &nbsp;&nbsp;&nbsp;// Back up:<br>
    &nbsp;&nbsp;&nbsp;Motor.A.backward();<br>
    &nbsp;&nbsp;&nbsp;Motor.C.backward();<br>
    &nbsp;&nbsp;&nbsp;try{Thread.sleep(1000);}catch(Exception e) {}<br>
    &nbsp;&nbsp;&nbsp;// Rotate by causing one wheel to stop:<br>
    &nbsp;&nbsp;&nbsp;Motor.A.stop();<br>
    &nbsp;&nbsp;&nbsp;try{Thread.sleep(300);}catch(Exception e) {}<br>
    &nbsp;&nbsp;&nbsp;Motor.C.stop();<br>
    }<o:p></o:p></span></p>
    </div>
    <!--[if !mso]--></td>
   </tr>
  </tbody></table>
  </span><!--[endif]--><!--[if !mso & !vml]-->&nbsp;<!--[endif]--><!--[if !vml]--></td>
 </tr>
</tbody></table>

</span><!--[endif]--><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<br style="" clear="all">

<p class="MsoBodyText3">Defining the suppress() method for this behavior is quite
easy in this example. The action() method above is the sort of method that runs
very quickly (1.3 seconds) and is usually high priority. We can either stop it
dead by stopping motor movement, or we could wait for it to complete the
backing up maneuver. To keep things simple, lets just stop the motors from
rotating:</p>

<p class="MsoNormal"><!--[if gte vml 1]><v:shape id="_x0000_s1035" type="#_x0000_t202"
 style='position:absolute;margin-left:31.5pt;margin-top:6.05pt;width:273pt;
 height:58.95pt;z-index:10;mso-position-vertical-relative:line'>
 <v:textbox style='mso-next-textbox:#_x0000_s1035;mso-fit-shape-to-text:t'/>
</v:shape><![endif]--><!--[if !vml]--><span style="">

<table align="left" cellpadding="0" cellspacing="0">
 <tbody><tr>
  <td height="7" width="41"></td>
 </tr>
 <tr>
  <td></td>
  <td style="border: 0.75pt solid black; background: white none repeat scroll 0%; vertical-align: top; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" bgcolor="white" height="85" width="370"><!--[endif]--><!--[if !mso]--><span style="position: absolute; z-index: 10;">
  <table cellpadding="0" cellspacing="0" width="100%">
   <tbody><tr>
    <td><!--[endif]-->
    <div v:shape="_x0000_s1035" style="padding: 3.6pt 7.2pt;" class="shape">
    <p class="MsoNormal"><span style="font-size: 9pt; font-family: &quot;Courier New&quot;;">public
    void suppress() {<br>
    &nbsp;&nbsp;&nbsp;Motor.A.stop();<br>
    &nbsp;&nbsp;&nbsp;Motor.C.stop();<br>
    }<o:p></o:p></span></p>
    </div>
    <!--[if !mso]--></td>
   </tr>
  </tbody></table>
  </span><!--[endif]--><!--[if !mso & !vml]-->&nbsp;<!--[endif]--><!--[if !vml]--></td>
 </tr>
</tbody></table>

</span><!--[endif]--><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<br style="" clear="all">

<p class="MsoBodyText3">The complete listing for this behavior is as follows:</p>

<p class="MsoNormal"><!--[if gte vml 1]><v:shape id="_x0000_s1027" type="#_x0000_t202"
 style='position:absolute;margin-left:31.85pt;margin-top:1.5pt;width:328.15pt;
 height:295.2pt;z-index:2;mso-position-vertical-relative:line'>
 <v:textbox style='mso-next-textbox:#_x0000_s1027;mso-fit-shape-to-text:t'/>
</v:shape><![endif]--><!--[if !vml]--><span style="">

<table align="left" cellpadding="0" cellspacing="0">
 <tbody><tr>
  <td height="1" width="41"></td>
 </tr>
 <tr>
  <td></td>
  <td style="border: 0.75pt solid black; background: white none repeat scroll 0%; vertical-align: top; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" bgcolor="white" height="400" width="444"><!--[endif]--><!--[if !mso]--><span style="position: absolute; z-index: 2;">
  <table cellpadding="0" cellspacing="0" width="100%">
   <tbody><tr>
    <td><!--[endif]-->
    <div v:shape="_x0000_s1027" style="padding: 3.6pt 7.2pt;" class="shape">
    <p class="MsoNormal"><span style="font-size: 9pt; font-family: &quot;Courier New&quot;;">import
    lejos.subsumption.*;<br>
    <br>
    import lejos.nxt.*;<br>
    <br>
    public class HitWall implements Behavior {<br>
    &nbsp;&nbsp;&nbsp;public boolean takeControl() {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Sensor.S2.readBooleanValue();<br>
    &nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;public void suppress() {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.A.stop();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.C.stop();<br>
    &nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;public void action() {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Back up:<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.A.backward();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.C.backward();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try{Thread.sleep(1000);}catch(Exception
    e) {}<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Rotate by causing only one wheel to
    stop:<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.A.stop();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try{Thread.sleep(300);}catch(Exception
    e) {}<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.C.stop();<br>
    &nbsp;&nbsp;&nbsp;}<br>
    }<o:p></o:p></span></p>
    </div>
    <!--[if !mso]--></td>
   </tr>
  </tbody></table>
  </span><!--[endif]--><!--[if !mso & !vml]-->&nbsp;<!--[endif]--><!--[if !vml]--></td>
 </tr>
</tbody></table>

</span><!--[endif]--><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<br style="" clear="all">

<p class="MsoBodyText3">We now have our two behaviors defined, and it's a simple
matter to make a class with a main() method to get things started. All we need
to do is create an array of our Behavior objects, and instantiate and start the
Arbitrator as shown in the following code listing:</p>

<p class="MsoNormal"><!--[if gte vml 1]><v:shape id="_x0000_s1028" type="#_x0000_t202"
 style='position:absolute;margin-left:42pt;margin-top:.8pt;width:297.4pt;
 height:137.7pt;z-index:3;mso-position-vertical-relative:line'>
 <v:textbox style='mso-fit-shape-to-text:t'/>
</v:shape><![endif]--><!--[if !vml]--><span style="">

<table align="left" cellpadding="0" cellspacing="0">
 <tbody><tr>
  <td height="0" width="55"></td>
 </tr>
 <tr>
  <td></td>
  <td style="border: 0.75pt solid black; background: white none repeat scroll 0%; vertical-align: top; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" bgcolor="white" height="190" width="403"><!--[endif]--><!--[if !mso]--><span style="position: absolute; z-index: 3;">
  <table cellpadding="0" cellspacing="0" width="100%">
   <tbody><tr>
    <td><!--[endif]-->
    <div v:shape="_x0000_s1028" style="padding: 3.6pt 7.2pt;" class="shape">
    <p class="MsoNormal"><span style="font-size: 9pt; font-family: &quot;Courier New&quot;;">import
    lejos.subsumption.*;<br>
    <br>
    public class BumperCar {<br>
    &nbsp;&nbsp;&nbsp;public static void main(String [] args) {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior b1 = new DriveForward();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior b2 = new HitWall();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior [] bArray = {b1, b2};<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Arbitrator arby = new
    Arbitrator(bArray);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arby.start();<br>
    &nbsp;&nbsp;&nbsp;}<br>
    }<o:p></o:p></span></p>
    </div>
    <!--[if !mso]--></td>
   </tr>
  </tbody></table>
  </span><!--[endif]--><!--[if !mso & !vml]-->&nbsp;<!--[endif]--><!--[if !vml]--></td>
 </tr>
</tbody></table>

</span><!--[endif]--><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<br style="" clear="all">

<p class="MsoBodyText3">The above code is fairly easy to understand. The first
two lines in the main() method create instances of our Behaviors. The third
line places them into an array, with the lowest priority behavior taking the
lowest array index. The fourth line creates the Arbitrator, and the fifth line
starts the Arbitration process. When this program is started the robot will
scurry forwards until it bangs into an object, then it will retreat, rotate,
and continue with its forward movement until the power is shut off.</p>

<p class="MsoBodyText3">This seems like a lot of extra work for two simple
behaviors, but now let's see how easy it is to insert a third behavior without
altering any code in the other classes. This is the part that makes behavior
control systems very appealing for robotics programming. Our third behavior
could be just about anything. We'll have this new behavior monitor the battery
level and play a tune when it dips below a certain level. Examine the completed
Behavior:</p>

<p class="MsoNormal"><!--[if gte vml 1]><v:shape id="_x0000_s1032" type="#_x0000_t202"
 style='position:absolute;margin-left:32.25pt;margin-top:.05pt;width:428.65pt;
 height:520.2pt;z-index:7;mso-position-vertical-relative:line'>
 <v:textbox style='mso-fit-shape-to-text:t'/>
</v:shape><![endif]--><!--[if !vml]--><span style="position: relative; z-index: 7;"><span style="position: absolute; left: 42px; top: -1px; width: 578px; height: 700px;">

<table cellpadding="0" cellspacing="0">
 <tbody><tr>
  <td style="border: 0.75pt solid black; background: white none repeat scroll 0%; vertical-align: top; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" bgcolor="white" height="700" width="578"><!--[endif]--><!--[if !mso]--><span style="position: absolute; z-index: 7;">
  <table cellpadding="0" cellspacing="0" width="100%">
   <tbody><tr>
    <td><!--[endif]-->
    <div v:shape="_x0000_s1032" style="padding: 3.6pt 7.2pt;" class="shape">
    <p class="MsoNormal"><span style="font-size: 9pt; font-family: &quot;Courier New&quot;;">import
    lejos.subsumption.*;<br>
    import lejos.nxt.*;<br>
    <br>
    public class BatteryLow implements Behavior {<br>
    &nbsp;&nbsp;&nbsp;private float LOW_LEVEL;<br>
    <br>
    &nbsp;&nbsp;&nbsp;private static final short [] note = {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2349,115, 0,5, 1760,165, 0,35, 1760,28,
    0,13, 1976,23,<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,18, 1760,18, 0,23, 1568,15, 0,25,
    1480,103, 0,18,<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1175,180, 0,20, 1760,18, 0,23, 1976,20,
    0,20, 1760,15,<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,25, 1568,15, 0,25, 2217,98, 0,23,
    1760,88, 0,33, 1760,<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;75, 0,5, 1760,20, 0,20, 1760,20, 0,20,
    1976,18, 0,23,<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1760,18, 0,23, 2217,225, 0,15,
    2217,218};<br>
    <br>
    &nbsp;&nbsp;&nbsp;public BatteryLow(float volts) {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOW_LEVEL = volts;<br>
    &nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;public boolean takeControl() {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float voltLevel =
    (ROM.getBatteryPower() * 10 / 355);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int displayNum = (int)(voltLevel *
    100);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LCD.setNumber(0x301f, displayNum,
    0x3004);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LCD.refresh();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return voltLevel &lt; LOW_LEVEL;<br>
    &nbsp;&nbsp;&nbsp;}<br>
    &nbsp;&nbsp;&nbsp;public void suppress() {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Nothing to suppress<br>
    &nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;public void action() {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;play();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try{Thread.sleep(3000);}catch(Exception
    e) {}<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<br>
    &nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;public static void play() {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int i=0;i&lt;note.length; i+=2) {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final short w =
    note[i+1];<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sound.playTone(note[i],
    w);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(w*10);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch
    (InterruptedException e) {}<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
    &nbsp;&nbsp;&nbsp;}<br>
    }<o:p></o:p></span></p>
    </div>
    <!--[if !mso]--></td>
   </tr>
  </tbody></table>
  </span><!--[endif]--><!--[if !mso & !vml]-->&nbsp;<!--[endif]--><!--[if !vml]--></td>
 </tr>
</tbody></table>

</span></span><!--[endif]--><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<br style="" clear="all">

<p class="MsoBodyText3">The complete tune is stored in the note array at line 6
and the method to play the notes is at line 30. This behavior will take control
only if the current battery level is less the voltage specified in the
constructor. The takeControl() method looks a little inflated, and that's
because it also displays the battery charge to the LCD display. The action()
and suppress() methods are comparatively easy. Action makes a bunch of noise,
then exits the program as soon as it is called. Since this behavior stops the
program, there is no need to create a suppress() method. </p>

<p class="MsoBodyText3">To insert this Behavior into our scheme is a trivial
task. We simply alter the code of our main class as follows:</p>

<p class="MsoNormal"><!--[if gte vml 1]><v:shape id="_x0000_s1036" type="#_x0000_t202"
 style='position:absolute;margin-left:36.75pt;margin-top:6.75pt;width:299.25pt;
 height:126.45pt;z-index:11;mso-position-vertical-relative:line'>
 <v:textbox style='mso-fit-shape-to-text:t'/>
</v:shape><![endif]--><!--[if !vml]--><span style="">

<table align="left" cellpadding="0" cellspacing="0">
 <tbody><tr>
  <td height="8" width="48"></td>
 </tr>
 <tr>
  <td></td>
  <td style="border: 0.75pt solid black; background: white none repeat scroll 0%; vertical-align: top; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" bgcolor="white" height="175" width="405"><!--[endif]--><!--[if !mso]--><span style="position: absolute; z-index: 11;">
  <table cellpadding="0" cellspacing="0" width="100%">
   <tbody><tr>
    <td><!--[endif]-->
    <div v:shape="_x0000_s1036" style="padding: 3.6pt 7.2pt;" class="shape">
    <p class="MsoNormal"><span style="font-size: 9pt; font-family: &quot;Courier New&quot;;">public
    class BumperCar {<br>
    &nbsp;&nbsp;&nbsp;public static void main(String [] args) {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior b1 = new DriveForward();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior b2 = new BatteryLow(6.5f);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior b3 = new HitWall();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior [] bArray = {b1, b2, b3};<br>
    &nbsp;&nbsp;&nbsp;Arbitrator arby = new Arbitrator(bArray);<br>
    &nbsp;&nbsp;&nbsp;arby.start();<br>
    &nbsp;&nbsp;&nbsp;}<br>
    } <o:p></o:p></span></p>
    </div>
    <!--[if !mso]--></td>
   </tr>
  </tbody></table>
  </span><!--[endif]--><!--[if !mso & !vml]-->&nbsp;<!--[endif]--><!--[if !vml]--></td>
 </tr>
</tbody></table>

</span><!--[endif]--><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<br style="" clear="all">

<p class="MsoBodyText3">Note: The voltage level of the NXT at rest is different
from the voltage when in action. The voltage level at rest might be 7.8 V, but
when motors are activated they naturally cause a drop in the voltage reading.
Make sure the voltage threshold used in the BatteryLow constructor is low enough.</p>

<p class="MsoBodyText3">This example beautifully demonstrates the real benefit of
behavior control coding. Inserting a new behavior, no matter what the rest of
the code looks like, is simple. The reason for this is grounded in object
oriented design; each behavior is a self contained, independent object.</p>

<p class="MsoBodyText3">TIP: When creating a behavior control system, it is best
to program each behavior one at a time and test them individually. If you code
all the behaviors and then upload them all at once to the NXT brick, there is a
good chance a bug will exist somewhere in the behaviors, making it difficult to
locate. By programming and testing them one at a time it makes it easier to
identify where the problem was introduced.</p>

<p class="MsoBodyText3">Behavior coding is predominantly used for autonomous
robots - robots that work independently, on their own free will. A robot arm
controlled by a human would likely not use behavior programming, although it
would be possible. For example, a robot arm with four joystick movements could
have a behavior for each direction of movement. But as you may recall,
behaviors are ordered with the highest order taking precedence over lower order
behaviors. Who is to say that pushing left on the joystick would take
precedence over pushing up? In other words, behavior control in anything other
than autonomous robots is largely overkill.</p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<h2><span lang="EN-GB">Advanced Behavior Coding</span></h2>

<p class="MsoBodyText2">It would be nice if all behaviors were as simple as the
examples given above, but in more complex coding there are some unexpected
results that can sometimes be introduced. Threads, for example, can sometimes
be difficult to halt from the suppress() method, which can lead to two
different threads fighting over the same resources - often the same motor!
Another problem that can potentially occur in multi-threaded programs is that events
go undetected, such as touch sensor hits. These are a few of the pitfalls we
will be examining in this section. Let's start by looking at what is generally
the least complicated of the three Behavior methods to implement; the
takeControl() method.</p>

<p class="MsoBodyText2">Note: The behavior control API used by leJOS NXJ is a
modified version of the model proposed by Rodney Brooks. His model is all done
at the lowest level possible - the motors. This prevents higher level classes
from being used in behaviors. For example, the Navigator class accesses the
motors of the NXT directly, so with the original behavior control model
Navigator could not be used. Also, if both motors are moving forward, and a
higher level behavior takes command it is not clear if all lower level motor movements
should be stopped. What if the higher level behavior only uses one of the
motors? Should the other keep moving forward? And will this lead to odd
behavior? These are the problems the leJOS Behavior Control API tries to address.
</p>

<h3><span lang="EN-GB">Coding bomb proof takeControl() Methods</span></h3>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoBodyText2">It is important for takeControl() methods to be
responsive in behavior control systems. When a bumper collides with an object,
the robot must stop or reverse direction immediately; otherwise it will
continue to move forward into the object. Sometimes when an event occurs, such
as a touch sensor press, the program misses the event because the RCX is
executing another thread. By the time it gets to the takeControl() method the
sensor has been released and the program misses its opportunity to activate the
proper behavior action. In this section we will learn how to make fool-proof takeControl()
methods.</p>

<p class="MsoNormal"><!--[if gte vml 1]><v:shape id="_x0000_s1037" type="#_x0000_t202"
 style='position:absolute;margin-left:26.25pt;margin-top:7.5pt;width:264.4pt;
 height:102.75pt;z-index:12;mso-position-vertical-relative:line'/><![endif]--><!--[if !vml]--><span style="">

<table align="left" cellpadding="0" cellspacing="0">
 <tbody><tr>
  <td height="9" width="34"></td>
 </tr>
 <tr>
  <td></td>
  <td style="border: 0.75pt solid black; background: white none repeat scroll 0%; vertical-align: top; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" bgcolor="white" height="143" width="359"><!--[endif]--><!--[if !mso]--><span style="position: absolute; z-index: 12;">
  <table cellpadding="0" cellspacing="0" width="100%">
   <tbody><tr>
    <td><!--[endif]-->
    <div v:shape="_x0000_s1037" style="padding: 3.6pt 7.2pt;" class="shape">
    <p><span style="font-size: 9pt; font-family: &quot;Courier New&quot;;">public boolean
    takeControl() {<br>
    &nbsp;&nbsp;&nbsp;boolean pass = false;<br>
    &nbsp;&nbsp;&nbsp;if(direction == EAST)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(Sensor.S1.readValue() &gt; 60)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(Sensor.S2.readValue()
    &lt; 20)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass
    = true;<br>
    &nbsp;&nbsp;&nbsp;return pass;<br>
    }<o:p></o:p></span></p>
    </div>
    <!--[if !mso]--></td>
   </tr>
  </tbody></table>
  </span><!--[endif]--><!--[if !mso & !vml]-->&nbsp;<!--[endif]--><!--[if !vml]--></td>
 </tr>
</tbody></table>

</span><!--[endif]--><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<br style="" clear="all">

<p class="MsoBodyText2">In the above example we used single indicators of whether
or not to take control. For example, it took one reading from the Sensor class
to check if the touch sensor was hit. The takeControl() method can also make a
decision to take control based on a number of different values. It could
initiate an action if it is facing east, the light reading is greater than 60,
and the temperature is less than 20 degrees:Likewise, a different behavior
could just as easily check on the same data, only react differently based on
different values. For example, another Behavior could initiate a different
action if the robot is facing west, the light reading is less than 60, and
temperature is greater than 20 degrees. So a robot can initiate an unlimited
number of responses with only a few sensors at its disposal. This leads to
another point about implementing the takeControl() method.</p>

<p class="MsoBodyText2">With the Arbitrator cycling through all the takeControl()
methods, there could be a significant delay in checking a condition, such as
whether a touch sensor has been tapped. It's a feature of the imperfect world
we live in that, when the robot strikes an object, the touch sensor may not
remain pressed. It sometimes bounces off the object into a position where the
bumper is no longer pressing on the touch sensor. You may have noticed in the example
that it relies on checking touch very often. What if the touch sensor is momentarily
activated, but the Arbitrator misses this fact? The solution is to use a
SensorListener, and have it set a flag to indicate the event has occurred.
Let's take the HitWall Behavior from the example above and modify it so it uses
a SensorListener:</p>

<p class="MsoNormal"><!--[if gte vml 1]><v:shape id="_x0000_s1038" type="#_x0000_t202"
 style='position:absolute;margin-left:42.35pt;margin-top:4.55pt;width:447.4pt;
 height:475.2pt;z-index:13;mso-position-vertical-relative:line'>
 <v:textbox style='mso-fit-shape-to-text:t'/>
</v:shape><![endif]--><!--[if !vml]--><span style="">

<table align="left" cellpadding="0" cellspacing="0">
 <tbody><tr>
  <td height="5" width="55"></td>
 </tr>
 <tr>
  <td></td>
  <td style="border: 0.75pt solid black; background: white none repeat scroll 0%; vertical-align: top; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" bgcolor="white" height="640" width="603"><!--[endif]--><!--[if !mso]--><span style="position: absolute; z-index: 13;">
  <table cellpadding="0" cellspacing="0" width="100%">
   <tbody><tr>
    <td><!--[endif]-->
    <div v:shape="_x0000_s1038" style="padding: 3.6pt 7.2pt;" class="shape">
    <p class="MsoNormal"><span style="font-size: 9pt; font-family: &quot;Courier New&quot;;">import
    lejos.subsumption.*;<br>
    import lejos.nxt.*;<br>
    <br>
    public class HitWall implements Behavior, SensorListener {<br>
    &nbsp;&nbsp;&nbsp;boolean hasCollided;<br>
    <br>
    &nbsp;&nbsp;&nbsp;// Constructor:<br>
    &nbsp;&nbsp;&nbsp;public HitWall() {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hasCollided = false;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SensorPort.S2.addSensorListener(this);<br>
    &nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;public void stateChanged(Sensor bumper, int oldValue, int
    newValue) {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(bumper.readBooleanValue() == true)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hasCollided = true;<br>
    &nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;public boolean takeControl() {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(hasCollided) {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hasCollided = false;
    // reset value<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>
    &nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;public void suppress() {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.A.stop();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.C.stop();<br>
    &nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;public void action() {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Back up:<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.A.backward();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.C.backward();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try{Thread.sleep(1000);}catch(Exception
    e) {}<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Rotate by causing only one wheel to
    stop:<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.A.stop();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try{Thread.sleep(300);}catch(Exception
    e) {}<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Motor.C.stop();<br>
    &nbsp;&nbsp;&nbsp;}<br>
    } <o:p></o:p></span></p>
    </div>
    <!--[if !mso]--></td>
   </tr>
  </tbody></table>
  </span><!--[endif]--><!--[if !mso & !vml]-->&nbsp;<!--[endif]--><!--[if !vml]--></td>
 </tr>
</tbody></table>

</span><!--[endif]--><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<br style="" clear="all">

<p class="MsoBodyText3">T<span class="BodyText2Char">he above code implements a
SensorPortListener, and hence implements the stateChanged() method. It is
important to add the sensor listener to Sensor.S2, as shown in line 10. Notice
the stateChanged() method does not simply return the value of the bumper Sensor;
rather, if the Sensor value is true then it changes the hasCollided variable to
true. If, on the next pass, the sensor value is false then hasCollided will
remain true until takeControl() has seen the hasCollided value. Once
takeControl() sees there has been a collision, then hasCollided is reset back
to false (line 20). With this new code, it should </span>be impossible for the
robot to miss any collisions with the bumper!</p>

<h3><span lang="EN-GB">Coding Solid action() and suppress() Methods</span></h3>

<p class="MsoBodyText3">In order to code functional action() and suppress()
pairs, it is necessary to understand how arbitration works. Arbitrator cycles
through each of its Behaviors, checking the takeControl() method to see if the
action() for the Behavior should be executed. It starts with the highest
priotiry method and goes down to the lowest priority Behavior. As soon as it
comes across a behavior that wants to take control, it executes suppress() for
the previous Behavior (assuming it is not a higher level thread), then runs the
action() method for the current Behavior. As soon as the action() method
returns, it then starts looping again, checking each behavior. If the
takeControl() from the previous Behavior continues to say true, it does not run
action() again. This is important; a single Behavior can not be executed twice
in a row. If it could, it would constantly be suppressing itself. If Arbitrator
moves on to another Behavior, when that behavior completes then it will call
action on the lower level behavior again.</p>

<p class="MsoBodyText3">Note: If you would like to remove any mystery about what
goes on in the Arbitrator class, take a look at the source code located in
src/classes/lejos/subsumption/Arbitrator.java.</p>

<p class="MsoBodyText3">To program individual behaviors it is important to
understand the fundamental differences between types of behaviors. Behavior
actions come in two basic varieties:</p>

<ul style="margin-top: 0in;" type="disc">
 <li class="MsoNormal" style="">Discrete
     actions which finish quickly (e.g. back up and turn) </li>
 <li class="MsoNormal" style="">Actions
     that start running and keep going an indefinite period until they are
     suppressed (e.g. driving forward, following a wall). </li>
</ul>

<p class="MsoBodyText3">One final word of advice. Discrete actions execute once
and return from the action() method call only when it has completed its
behavior. These types of Behaviors generally do not need any code in the
suppress() method because once the action is done there is nothing to suppress.
The second type of action sometimes runs in a separate thread, although not
always. For example, the Motor.A.forward() method call acts like a thread
because the motor keeps turning after the method returns. In actuality, this is
not a thread; the RCX just turns on an internal switch to activate the motor.
An example of a true thread would be complex behavior, such as wall following.
The action() method could start a thread to begin following a wall until the
suppress() method is called. Be careful of never ending loops! If one were to
occur within the action() method then the program would become stuck.</p>

<h3><span lang="EN-GB">Summary</span></h3>

<p class="MsoBodyText3">So why use the Behavior API? The best reason is because
in programming we strive to create the simplest, most powerful solution
possible, even if it takes slightly more time. The importance of reusable,
maintainable code has been demonstrated repeatedly in the workplace, especially
on projects involving more than one person. If you leave your code and come
back to it several months later, the things that looked so obvious suddenly
don't anymore. With Behavior control, you can add and remove behaviors without
even looking at the rest of the code, even if there are 10 or more bahaviors in
the program. Another big plus of behavior control is programmers can exchange
Behaviors with each other easily, which fosters code reusability. Hundreds of
interesting, generic behaviors could be uploaded to websites, and you could
simply pick the behaviors you want to add to your robot (assuming your robot is
the correct type of robot). This reusability of code can be taken forward even
more by using standard leJOS NXJ classes such as the Navigation API.</p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

</div>

</body></html>